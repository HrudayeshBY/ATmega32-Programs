
Blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008b5  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000597  00000000  00000000  00000b7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000392  00000000  00000000  00001114  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000014a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000305  00000000  00000000  000014cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000039c  00000000  00000000  000017d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001b6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>

int main()
{
	DDRC = 0xFF; // setting all pins of port C as output pins
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
	//directly manipulating the data register is not good, we need to use bit manipulation
	while (1)
	{
		PORTC = 0xFF;
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  74:	2f ef       	ldi	r18, 0xFF	; 255
  76:	39 e6       	ldi	r19, 0x69	; 105
  78:	48 e1       	ldi	r20, 0x18	; 24
  7a:	21 50       	subi	r18, 0x01	; 1
  7c:	30 40       	sbci	r19, 0x00	; 0
  7e:	40 40       	sbci	r20, 0x00	; 0
  80:	e1 f7       	brne	.-8      	; 0x7a <main+0xe>
  82:	00 c0       	rjmp	.+0      	; 0x84 <main+0x18>
  84:	00 00       	nop
		_delay_ms(1000);
		PORTC = 0x00;
  86:	15 ba       	out	0x15, r1	; 21
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	99 e6       	ldi	r25, 0x69	; 105
  8c:	e8 e1       	ldi	r30, 0x18	; 24
  8e:	81 50       	subi	r24, 0x01	; 1
  90:	90 40       	sbci	r25, 0x00	; 0
  92:	e0 40       	sbci	r30, 0x00	; 0
  94:	e1 f7       	brne	.-8      	; 0x8e <main+0x22>
  96:	00 c0       	rjmp	.+0      	; 0x98 <main+0x2c>
  98:	00 00       	nop
		_delay_ms(1000);
		PORTC = 0xAA;
  9a:	8a ea       	ldi	r24, 0xAA	; 170
  9c:	85 bb       	out	0x15, r24	; 21
  9e:	ff ef       	ldi	r31, 0xFF	; 255
  a0:	29 e6       	ldi	r18, 0x69	; 105
  a2:	38 e1       	ldi	r19, 0x18	; 24
  a4:	f1 50       	subi	r31, 0x01	; 1
  a6:	20 40       	sbci	r18, 0x00	; 0
  a8:	30 40       	sbci	r19, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x38>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x42>
  ae:	00 00       	nop
		_delay_ms(1000);
		PORTC = 0x55;
  b0:	85 e5       	ldi	r24, 0x55	; 85
  b2:	85 bb       	out	0x15, r24	; 21
  b4:	4f ef       	ldi	r20, 0xFF	; 255
  b6:	89 e6       	ldi	r24, 0x69	; 105
  b8:	98 e1       	ldi	r25, 0x18	; 24
  ba:	41 50       	subi	r20, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x4e>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x58>
  c4:	00 00       	nop
		_delay_ms(1000);
		
		PORTC = 0x00;
  c6:	15 ba       	out	0x15, r1	; 21
  c8:	ef ef       	ldi	r30, 0xFF	; 255
  ca:	f9 e6       	ldi	r31, 0x69	; 105
  cc:	28 e1       	ldi	r18, 0x18	; 24
  ce:	e1 50       	subi	r30, 0x01	; 1
  d0:	f0 40       	sbci	r31, 0x00	; 0
  d2:	20 40       	sbci	r18, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x62>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x6c>
  d8:	00 00       	nop
		_delay_ms(1000);
		
		for(int i = 0;i < 8;i++)
  da:	20 e0       	ldi	r18, 0x00	; 0
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	16 c0       	rjmp	.+44     	; 0x10c <main+0xa0>
		{
			PORTC = PORTC | (1<<i);
  e0:	45 b3       	in	r20, 0x15	; 21
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	02 2e       	mov	r0, r18
  e8:	02 c0       	rjmp	.+4      	; 0xee <main+0x82>
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	0a 94       	dec	r0
  f0:	e2 f7       	brpl	.-8      	; 0xea <main+0x7e>
  f2:	84 2b       	or	r24, r20
  f4:	85 bb       	out	0x15, r24	; 21
  f6:	4f ef       	ldi	r20, 0xFF	; 255
  f8:	80 e7       	ldi	r24, 0x70	; 112
  fa:	92 e0       	ldi	r25, 0x02	; 2
  fc:	41 50       	subi	r20, 0x01	; 1
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x90>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x9a>
 106:	00 00       	nop
		_delay_ms(1000);
		
		PORTC = 0x00;
		_delay_ms(1000);
		
		for(int i = 0;i < 8;i++)
 108:	2f 5f       	subi	r18, 0xFF	; 255
 10a:	3f 4f       	sbci	r19, 0xFF	; 255
 10c:	28 30       	cpi	r18, 0x08	; 8
 10e:	31 05       	cpc	r19, r1
 110:	3c f3       	brlt	.-50     	; 0xe0 <main+0x74>
 112:	20 e0       	ldi	r18, 0x00	; 0
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	13 c0       	rjmp	.+38     	; 0x13e <main+0xd2>

		}
		
		for(int i = 0;i < 8;i++)
		{
			PORTC = PORTC & (255>>i);
 118:	45 b3       	in	r20, 0x15	; 21
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 2e       	mov	r0, r18
 120:	02 c0       	rjmp	.+4      	; 0x126 <main+0xba>
 122:	95 95       	asr	r25
 124:	87 95       	ror	r24
 126:	0a 94       	dec	r0
 128:	e2 f7       	brpl	.-8      	; 0x122 <main+0xb6>
 12a:	84 23       	and	r24, r20
 12c:	85 bb       	out	0x15, r24	; 21
 12e:	ef e1       	ldi	r30, 0x1F	; 31
 130:	fe e4       	ldi	r31, 0x4E	; 78
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <main+0xc6>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0xcc>
 138:	00 00       	nop
			PORTC = PORTC | (1<<i);
		    _delay_ms(100);

		}
		
		for(int i = 0;i < 8;i++)
 13a:	2f 5f       	subi	r18, 0xFF	; 255
 13c:	3f 4f       	sbci	r19, 0xFF	; 255
 13e:	28 30       	cpi	r18, 0x08	; 8
 140:	31 05       	cpc	r19, r1
 142:	54 f3       	brlt	.-44     	; 0x118 <main+0xac>
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	08 c0       	rjmp	.+16     	; 0x15a <main+0xee>
			_delay_ms(10);

		}
		for(int i = 0;i < 256;i++)
		{
			PORTC = i;
 14a:	85 bb       	out	0x15, r24	; 21
 14c:	ef e1       	ldi	r30, 0x1F	; 31
 14e:	fe e4       	ldi	r31, 0x4E	; 78
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <main+0xe4>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0xea>
 156:	00 00       	nop
		{
			PORTC = PORTC & (255>>i);
			_delay_ms(10);

		}
		for(int i = 0;i < 256;i++)
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	8f 3f       	cpi	r24, 0xFF	; 255
 15c:	91 05       	cpc	r25, r1
 15e:	a9 f3       	breq	.-22     	; 0x14a <main+0xde>
 160:	a4 f3       	brlt	.-24     	; 0x14a <main+0xde>
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	08 c0       	rjmp	.+16     	; 0x178 <main+0x10c>
			_delay_ms(10);

		}
		for(int i = 255;i >= 0;i--)
		{
			PORTC = i;
 168:	85 bb       	out	0x15, r24	; 21
 16a:	ef e1       	ldi	r30, 0x1F	; 31
 16c:	fe e4       	ldi	r31, 0x4E	; 78
 16e:	31 97       	sbiw	r30, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <main+0x102>
 172:	00 c0       	rjmp	.+0      	; 0x174 <main+0x108>
 174:	00 00       	nop
		{
			PORTC = i;
			_delay_ms(10);

		}
		for(int i = 255;i >= 0;i--)
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	99 23       	and	r25, r25
 17a:	b4 f7       	brge	.-20     	; 0x168 <main+0xfc>
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	13 c0       	rjmp	.+38     	; 0x1a8 <main+0x13c>

		}
		
		for(int i = 0;i < 8;i++)
		{
			PORTC = (1<<i);
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	08 2e       	mov	r0, r24
 188:	02 c0       	rjmp	.+4      	; 0x18e <main+0x122>
 18a:	22 0f       	add	r18, r18
 18c:	33 1f       	adc	r19, r19
 18e:	0a 94       	dec	r0
 190:	e2 f7       	brpl	.-8      	; 0x18a <main+0x11e>
 192:	25 bb       	out	0x15, r18	; 21
 194:	ff ef       	ldi	r31, 0xFF	; 255
 196:	20 e7       	ldi	r18, 0x70	; 112
 198:	32 e0       	ldi	r19, 0x02	; 2
 19a:	f1 50       	subi	r31, 0x01	; 1
 19c:	20 40       	sbci	r18, 0x00	; 0
 19e:	30 40       	sbci	r19, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <main+0x12e>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <main+0x138>
 1a4:	00 00       	nop
			PORTC = i;
			_delay_ms(10);

		}
		
		for(int i = 0;i < 8;i++)
 1a6:	01 96       	adiw	r24, 0x01	; 1
 1a8:	88 30       	cpi	r24, 0x08	; 8
 1aa:	91 05       	cpc	r25, r1
 1ac:	54 f3       	brlt	.-44     	; 0x182 <main+0x116>
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	13 c0       	rjmp	.+38     	; 0x1da <main+0x16e>
			_delay_ms(100);

		}
		for(int i = 0;i < 8;i++)
		{
			PORTC = (255>>i);
 1b4:	2f ef       	ldi	r18, 0xFF	; 255
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	08 2e       	mov	r0, r24
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <main+0x154>
 1bc:	35 95       	asr	r19
 1be:	27 95       	ror	r18
 1c0:	0a 94       	dec	r0
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <main+0x150>
 1c4:	25 bb       	out	0x15, r18	; 21
 1c6:	4f ef       	ldi	r20, 0xFF	; 255
 1c8:	e0 e7       	ldi	r30, 0x70	; 112
 1ca:	f2 e0       	ldi	r31, 0x02	; 2
 1cc:	41 50       	subi	r20, 0x01	; 1
 1ce:	e0 40       	sbci	r30, 0x00	; 0
 1d0:	f0 40       	sbci	r31, 0x00	; 0
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <main+0x160>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <main+0x16a>
 1d6:	00 00       	nop
		{
			PORTC = (1<<i);
			_delay_ms(100);

		}
		for(int i = 0;i < 8;i++)
 1d8:	01 96       	adiw	r24, 0x01	; 1
 1da:	88 30       	cpi	r24, 0x08	; 8
 1dc:	91 05       	cpc	r25, r1
 1de:	54 f3       	brlt	.-44     	; 0x1b4 <main+0x148>
 1e0:	47 cf       	rjmp	.-370    	; 0x70 <main+0x4>

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
