
8x8_DMD_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000182  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000182  000001f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007e7  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000650  00000000  00000000  00000a8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000312  00000000  00000000  000010db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000006c  00000000  00000000  000013f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000363  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e0  00000000  00000000  000017bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000199f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e8       	ldi	r30, 0x82	; 130
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  7a:	0c 94 bf 00 	jmp	0x17e	; 0x17e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <SPI_init>:
#define CS_ON PORTB &= ~(1<<PB4);
#define CS_OFF PORTB |= (1<<PB4);

void SPI_init()
{
	DDRB |= (1<<PB4) | (1<<PB5) | (1<<PB7);
  82:	87 b3       	in	r24, 0x17	; 23
  84:	80 6b       	ori	r24, 0xB0	; 176
  86:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<PB6); //MISO Pin
  88:	87 b3       	in	r24, 0x17	; 23
  8a:	8f 7b       	andi	r24, 0xBF	; 191
  8c:	87 bb       	out	0x17, r24	; 23
	
	SPCR |= (1<<SPE) | (1<<MSTR);
  8e:	8d b1       	in	r24, 0x0d	; 13
  90:	80 65       	ori	r24, 0x50	; 80
  92:	8d b9       	out	0x0d, r24	; 13
	SPSR &= ~(1<<SPI2X); // SPI clock is Fosc / 4
  94:	8e b1       	in	r24, 0x0e	; 14
  96:	8e 7f       	andi	r24, 0xFE	; 254
  98:	8e b9       	out	0x0e, r24	; 14
  9a:	08 95       	ret

0000009c <SPI_master_tx>:
}

void SPI_master_tx(uint8_t data)
{
	char dummy = 0x00;
	SPDR = data;
  9c:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)))
  9e:	77 9b       	sbis	0x0e, 7	; 14
  a0:	fe cf       	rjmp	.-4      	; 0x9e <SPI_master_tx+0x2>
	{
		//wait
	}
	dummy = SPDR;
  a2:	8f b1       	in	r24, 0x0f	; 15
  a4:	08 95       	ret

000000a6 <DMD_register_write>:
}
void DMD_register_write(uint8_t addr, uint8_t data)
{
  a6:	cf 93       	push	r28
  a8:	c6 2f       	mov	r28, r22
	CS_ON;
  aa:	98 b3       	in	r25, 0x18	; 24
  ac:	9f 7e       	andi	r25, 0xEF	; 239
  ae:	98 bb       	out	0x18, r25	; 24
	SPI_master_tx(addr);
  b0:	0e 94 4e 00 	call	0x9c	; 0x9c <SPI_master_tx>
	SPI_master_tx(data);
  b4:	8c 2f       	mov	r24, r28
  b6:	0e 94 4e 00 	call	0x9c	; 0x9c <SPI_master_tx>
	CS_OFF;
  ba:	88 b3       	in	r24, 0x18	; 24
  bc:	80 61       	ori	r24, 0x10	; 16
  be:	88 bb       	out	0x18, r24	; 24
}
  c0:	cf 91       	pop	r28
  c2:	08 95       	ret

000000c4 <main>:
int main(void)
{
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62
  cc:	28 97       	sbiw	r28, 0x08	; 8
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	f8 94       	cli
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	cd bf       	out	0x3d, r28	; 61
	uint8_t smiley[8] = {0x00,0x66,0x66,0x00,0x42,0x28,0x18,0x00};
  d8:	88 e0       	ldi	r24, 0x08	; 8
  da:	e0 e6       	ldi	r30, 0x60	; 96
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	de 01       	movw	r26, r28
  e0:	11 96       	adiw	r26, 0x01	; 1
  e2:	01 90       	ld	r0, Z+
  e4:	0d 92       	st	X+, r0
  e6:	8a 95       	dec	r24
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x1e>
	uint8_t heart[8] = {0x00,0x67,0xFF,0xFF,0x7E,0x3C,0x18,0x00};
	SPI_init();
  ea:	0e 94 41 00 	call	0x82	; 0x82 <SPI_init>
	CS_ON;
  ee:	88 b3       	in	r24, 0x18	; 24
  f0:	8f 7e       	andi	r24, 0xEF	; 239
  f2:	88 bb       	out	0x18, r24	; 24
	DMD_register_write(DECODE_MODE_REGISTER,0x00);
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	89 e0       	ldi	r24, 0x09	; 9
  f8:	0e 94 53 00 	call	0xa6	; 0xa6 <DMD_register_write>
	CS_OFF;
  fc:	88 b3       	in	r24, 0x18	; 24
  fe:	80 61       	ori	r24, 0x10	; 16
 100:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	80 e7       	ldi	r24, 0x70	; 112
 106:	92 e0       	ldi	r25, 0x02	; 2
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x44>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x4e>
 112:	00 00       	nop
	_delay_ms(100);
	CS_ON;
 114:	88 b3       	in	r24, 0x18	; 24
 116:	8f 7e       	andi	r24, 0xEF	; 239
 118:	88 bb       	out	0x18, r24	; 24
	DMD_register_write(SHUT_DOWN_MODE_REGISTER,0x01);
 11a:	61 e0       	ldi	r22, 0x01	; 1
 11c:	8c e0       	ldi	r24, 0x0C	; 12
 11e:	0e 94 53 00 	call	0xa6	; 0xa6 <DMD_register_write>
	CS_OFF;
 122:	88 b3       	in	r24, 0x18	; 24
 124:	80 61       	ori	r24, 0x10	; 16
 126:	88 bb       	out	0x18, r24	; 24
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	80 e7       	ldi	r24, 0x70	; 112
 12c:	92 e0       	ldi	r25, 0x02	; 2
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <main+0x6a>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0x74>
 138:	00 00       	nop
    
    while (1) 
    {
		_delay_ms(100);
		for(uint8_t i = 0x01;i <= 0x08;i++)
 13a:	11 e0       	ldi	r17, 0x01	; 1
 13c:	14 c0       	rjmp	.+40     	; 0x166 <main+0xa2>
		{
			DMD_register_write(i,smiley[i - 1]);
 13e:	e1 2f       	mov	r30, r17
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	8c 0f       	add	r24, r28
 14a:	9d 1f       	adc	r25, r29
 14c:	e8 0f       	add	r30, r24
 14e:	f9 1f       	adc	r31, r25
 150:	60 81       	ld	r22, Z
 152:	81 2f       	mov	r24, r17
 154:	0e 94 53 00 	call	0xa6	; 0xa6 <DMD_register_write>
 158:	8f e1       	ldi	r24, 0x1F	; 31
 15a:	9e e4       	ldi	r25, 0x4E	; 78
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <main+0x98>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x9e>
 162:	00 00       	nop
	CS_OFF;
    
    while (1) 
    {
		_delay_ms(100);
		for(uint8_t i = 0x01;i <= 0x08;i++)
 164:	1f 5f       	subi	r17, 0xFF	; 255
 166:	19 30       	cpi	r17, 0x09	; 9
 168:	50 f3       	brcs	.-44     	; 0x13e <main+0x7a>
 16a:	9f ef       	ldi	r25, 0xFF	; 255
 16c:	23 e2       	ldi	r18, 0x23	; 35
 16e:	84 ef       	ldi	r24, 0xF4	; 244
 170:	91 50       	subi	r25, 0x01	; 1
 172:	20 40       	sbci	r18, 0x00	; 0
 174:	80 40       	sbci	r24, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <main+0xac>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0xb6>
 17a:	00 00       	nop
 17c:	d5 cf       	rjmp	.-86     	; 0x128 <main+0x64>

0000017e <_exit>:
 17e:	f8 94       	cli

00000180 <__stop_program>:
 180:	ff cf       	rjmp	.-2      	; 0x180 <__stop_program>
