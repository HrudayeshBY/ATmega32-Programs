
button_prac.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000146  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000019a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000070e  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058b  00000000  00000000  00000936  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b2  00000000  00000000  00000ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001174  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000311  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000168  00000000  00000000  000014a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001611  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 a1 00 	jmp	0x142	; 0x142 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRC &= ~(1<<PC0) & ~(1<<PC1); //PC0 and PC1 pin set as input
  6c:	84 b3       	in	r24, 0x14	; 20
  6e:	8c 7f       	andi	r24, 0xFC	; 252
  70:	84 bb       	out	0x14, r24	; 20
	DDRD |= (1<<PD0) | (1<<PD1);
  72:	81 b3       	in	r24, 0x11	; 17
  74:	83 60       	ori	r24, 0x03	; 3
  76:	81 bb       	out	0x11, r24	; 17
	while (1)
	{
		if((PINC & 0x03) == 0x02)
  78:	83 b3       	in	r24, 0x13	; 19
  7a:	83 70       	andi	r24, 0x03	; 3
  7c:	82 30       	cpi	r24, 0x02	; 2
  7e:	f9 f4       	brne	.+62     	; 0xbe <main+0x52>
		{
			PORTD |= (1<<PD0);
  80:	82 b3       	in	r24, 0x12	; 18
  82:	81 60       	ori	r24, 0x01	; 1
  84:	82 bb       	out	0x12, r24	; 18
			PORTD &= ~(1<<PD1);
  86:	82 b3       	in	r24, 0x12	; 18
  88:	8d 7f       	andi	r24, 0xFD	; 253
  8a:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	2f ef       	ldi	r18, 0xFF	; 255
  8e:	82 e5       	ldi	r24, 0x52	; 82
  90:	97 e0       	ldi	r25, 0x07	; 7
  92:	21 50       	subi	r18, 0x01	; 1
  94:	80 40       	sbci	r24, 0x00	; 0
  96:	90 40       	sbci	r25, 0x00	; 0
  98:	e1 f7       	brne	.-8      	; 0x92 <main+0x26>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <main+0x30>
  9c:	00 00       	nop
			_delay_ms(300);
			PORTD |= (1<<PD1);
  9e:	82 b3       	in	r24, 0x12	; 18
  a0:	82 60       	ori	r24, 0x02	; 2
  a2:	82 bb       	out	0x12, r24	; 18
			PORTD &= ~(1<<PD0);
  a4:	82 b3       	in	r24, 0x12	; 18
  a6:	8e 7f       	andi	r24, 0xFE	; 254
  a8:	82 bb       	out	0x12, r24	; 18
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	82 e5       	ldi	r24, 0x52	; 82
  ae:	97 e0       	ldi	r25, 0x07	; 7
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x44>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x4e>
  ba:	00 00       	nop
  bc:	dd cf       	rjmp	.-70     	; 0x78 <main+0xc>
			_delay_ms(300);
		}

		else if((PINC & 0x03) == 0x01)
  be:	83 b3       	in	r24, 0x13	; 19
  c0:	83 70       	andi	r24, 0x03	; 3
  c2:	81 30       	cpi	r24, 0x01	; 1
  c4:	f9 f4       	brne	.+62     	; 0x104 <main+0x98>
		{
			PORTD |= (1<<PD0);
  c6:	82 b3       	in	r24, 0x12	; 18
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	82 bb       	out	0x12, r24	; 18
			PORTD &= ~(1<<PD1);
  cc:	82 b3       	in	r24, 0x12	; 18
  ce:	8d 7f       	andi	r24, 0xFD	; 253
  d0:	82 bb       	out	0x12, r24	; 18
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	81 ee       	ldi	r24, 0xE1	; 225
  d6:	94 e0       	ldi	r25, 0x04	; 4
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x6c>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x76>
  e2:	00 00       	nop
			_delay_ms(200);
			PORTD |= (1<<PD1);
  e4:	82 b3       	in	r24, 0x12	; 18
  e6:	82 60       	ori	r24, 0x02	; 2
  e8:	82 bb       	out	0x12, r24	; 18
			PORTD &= ~(1<<PD0);
  ea:	82 b3       	in	r24, 0x12	; 18
  ec:	8e 7f       	andi	r24, 0xFE	; 254
  ee:	82 bb       	out	0x12, r24	; 18
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	81 ee       	ldi	r24, 0xE1	; 225
  f4:	94 e0       	ldi	r25, 0x04	; 4
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x8a>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x94>
 100:	00 00       	nop
 102:	ba cf       	rjmp	.-140    	; 0x78 <main+0xc>
			_delay_ms(200);
		}
		else
		{
			PORTD |= (1<<PD0);
 104:	82 b3       	in	r24, 0x12	; 18
 106:	81 60       	ori	r24, 0x01	; 1
 108:	82 bb       	out	0x12, r24	; 18
			PORTD &= ~(1<<PD1);
 10a:	82 b3       	in	r24, 0x12	; 18
 10c:	8d 7f       	andi	r24, 0xFD	; 253
 10e:	82 bb       	out	0x12, r24	; 18
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	80 e7       	ldi	r24, 0x70	; 112
 114:	92 e0       	ldi	r25, 0x02	; 2
 116:	21 50       	subi	r18, 0x01	; 1
 118:	80 40       	sbci	r24, 0x00	; 0
 11a:	90 40       	sbci	r25, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0xaa>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0xb4>
 120:	00 00       	nop
			_delay_ms(100);
			PORTD |= (1<<PD1);
 122:	82 b3       	in	r24, 0x12	; 18
 124:	82 60       	ori	r24, 0x02	; 2
 126:	82 bb       	out	0x12, r24	; 18
			PORTD &= ~(1<<PD0);
 128:	82 b3       	in	r24, 0x12	; 18
 12a:	8e 7f       	andi	r24, 0xFE	; 254
 12c:	82 bb       	out	0x12, r24	; 18
 12e:	2f ef       	ldi	r18, 0xFF	; 255
 130:	80 e7       	ldi	r24, 0x70	; 112
 132:	92 e0       	ldi	r25, 0x02	; 2
 134:	21 50       	subi	r18, 0x01	; 1
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0xc8>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0xd2>
 13e:	00 00       	nop
 140:	9b cf       	rjmp	.-202    	; 0x78 <main+0xc>

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
