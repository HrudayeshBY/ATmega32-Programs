
lcd_16x2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000760  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e2  00000000  00000000  00000960  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f9  00000000  00000000  00000f42  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000123c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000327  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014a  00000000  00000000  000015a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000016f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  64:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <sendCmd>:
#include <avr/io.h>
#include <util/delay.h>

void sendCmd(char cmd)
{
	PORTC = cmd;
  6c:	85 bb       	out	0x15, r24	; 21
	PORTD = 0x20;
  6e:	80 e2       	ldi	r24, 0x20	; 32
  70:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  72:	2f ef       	ldi	r18, 0xFF	; 255
  74:	80 e7       	ldi	r24, 0x70	; 112
  76:	92 e0       	ldi	r25, 0x02	; 2
  78:	21 50       	subi	r18, 0x01	; 1
  7a:	80 40       	sbci	r24, 0x00	; 0
  7c:	90 40       	sbci	r25, 0x00	; 0
  7e:	e1 f7       	brne	.-8      	; 0x78 <sendCmd+0xc>
  80:	00 c0       	rjmp	.+0      	; 0x82 <sendCmd+0x16>
  82:	00 00       	nop
	_delay_ms(100);
	PORTD = 0x00;
  84:	12 ba       	out	0x12, r1	; 18
  86:	08 95       	ret

00000088 <sendData>:
}

void sendData(char data)
{
	PORTC = data;
  88:	85 bb       	out	0x15, r24	; 21
	PORTD = 0xA0;
  8a:	80 ea       	ldi	r24, 0xA0	; 160
  8c:	82 bb       	out	0x12, r24	; 18
  8e:	2f ef       	ldi	r18, 0xFF	; 255
  90:	80 e7       	ldi	r24, 0x70	; 112
  92:	92 e0       	ldi	r25, 0x02	; 2
  94:	21 50       	subi	r18, 0x01	; 1
  96:	80 40       	sbci	r24, 0x00	; 0
  98:	90 40       	sbci	r25, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <sendData+0xc>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <sendData+0x16>
  9e:	00 00       	nop
	_delay_ms(100);
	PORTD = 0x80;
  a0:	80 e8       	ldi	r24, 0x80	; 128
  a2:	82 bb       	out	0x12, r24	; 18
  a4:	08 95       	ret

000000a6 <main>:
}

int main(void)
{
    DDRC = 0xFF;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFF;
  aa:	81 bb       	out	0x11, r24	; 17
	PORTC = 0x00;
  ac:	15 ba       	out	0x15, r1	; 21
	PORTD = 0x00;
  ae:	12 ba       	out	0x12, r1	; 18
	sendCmd(0x38);
  b0:	88 e3       	ldi	r24, 0x38	; 56
  b2:	0e 94 36 00 	call	0x6c	; 0x6c <sendCmd>
	sendCmd(0x80);
  b6:	80 e8       	ldi	r24, 0x80	; 128
  b8:	0e 94 36 00 	call	0x6c	; 0x6c <sendCmd>
	sendCmd(0x01);
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	0e 94 36 00 	call	0x6c	; 0x6c <sendCmd>
	sendCmd(0x0E);
  c2:	8e e0       	ldi	r24, 0x0E	; 14
  c4:	0e 94 36 00 	call	0x6c	; 0x6c <sendCmd>
	sendCmd(0x06);
  c8:	86 e0       	ldi	r24, 0x06	; 6
  ca:	0e 94 36 00 	call	0x6c	; 0x6c <sendCmd>
	sendCmd(0x01);
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	0e 94 36 00 	call	0x6c	; 0x6c <sendCmd>
	int count = 0;
	for(char c = 65;c<120;c++)
  d4:	c1 e4       	ldi	r28, 0x41	; 65
	sendCmd(0x80);
	sendCmd(0x01);
	sendCmd(0x0E);
	sendCmd(0x06);
	sendCmd(0x01);
	int count = 0;
  d6:	00 e0       	ldi	r16, 0x00	; 0
  d8:	10 e0       	ldi	r17, 0x00	; 0
	for(char c = 65;c<120;c++)
  da:	11 c0       	rjmp	.+34     	; 0xfe <main+0x58>
	{
		sendData(c);
  dc:	8c 2f       	mov	r24, r28
  de:	0e 94 44 00 	call	0x88	; 0x88 <sendData>
		count++;
  e2:	0f 5f       	subi	r16, 0xFF	; 255
  e4:	1f 4f       	sbci	r17, 0xFF	; 255
		if(count >16)
  e6:	01 31       	cpi	r16, 0x11	; 17
  e8:	11 05       	cpc	r17, r1
  ea:	44 f0       	brlt	.+16     	; 0xfc <main+0x56>
		{
			count = 0;
			sendCmd(0x01);
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	0e 94 36 00 	call	0x6c	; 0x6c <sendCmd>
			sendCmd(0x80);
  f2:	80 e8       	ldi	r24, 0x80	; 128
  f4:	0e 94 36 00 	call	0x6c	; 0x6c <sendCmd>
	{
		sendData(c);
		count++;
		if(count >16)
		{
			count = 0;
  f8:	00 e0       	ldi	r16, 0x00	; 0
  fa:	10 e0       	ldi	r17, 0x00	; 0
	sendCmd(0x01);
	sendCmd(0x0E);
	sendCmd(0x06);
	sendCmd(0x01);
	int count = 0;
	for(char c = 65;c<120;c++)
  fc:	cf 5f       	subi	r28, 0xFF	; 255
  fe:	c8 37       	cpi	r28, 0x78	; 120
 100:	68 f3       	brcs	.-38     	; 0xdc <main+0x36>
			count = 0;
			sendCmd(0x01);
			sendCmd(0x80);
		}
	}
	sendData('A');
 102:	81 e4       	ldi	r24, 0x41	; 65
 104:	0e 94 44 00 	call	0x88	; 0x88 <sendData>
 108:	ff cf       	rjmp	.-2      	; 0x108 <main+0x62>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
