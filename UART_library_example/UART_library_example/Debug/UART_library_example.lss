
UART_library_example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  0000011c  00000190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000813  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006cd  00000000  00000000  00000a83  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003de  00000000  00000000  00001150  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00001530  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000385  00000000  00000000  000015e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000018e  00000000  00000000  00001965  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001af3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e1       	ldi	r30, 0x1C	; 28
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "UART.h"
#include <avr/io.h>

int main(void)
{
	UART_init();
  82:	0e 94 5d 00 	call	0xba	; 0xba <UART_init>
    while (1) 
    {
		UART_transmit_character('h');
  86:	88 e6       	ldi	r24, 0x68	; 104
  88:	0e 94 6c 00 	call	0xd8	; 0xd8 <UART_transmit_character>
		UART_transmit_character('i');
  8c:	89 e6       	ldi	r24, 0x69	; 105
  8e:	0e 94 6c 00 	call	0xd8	; 0xd8 <UART_transmit_character>
		UART_transmit_character('I');
  92:	89 e4       	ldi	r24, 0x49	; 73
  94:	0e 94 6c 00 	call	0xd8	; 0xd8 <UART_transmit_character>
		UART_transmit_character('m');
  98:	8d e6       	ldi	r24, 0x6D	; 109
  9a:	0e 94 6c 00 	call	0xd8	; 0xd8 <UART_transmit_character>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	89 e6       	ldi	r24, 0x69	; 105
  a2:	98 e1       	ldi	r25, 0x18	; 24
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	80 40       	sbci	r24, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x22>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x2c>
  ae:	00 00       	nop
		_delay_ms(1000);
		UART_println("I made a Library");
  b0:	80 e6       	ldi	r24, 0x60	; 96
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 70 00 	call	0xe0	; 0xe0 <UART_println>
  b8:	e6 cf       	rjmp	.-52     	; 0x86 <main+0x4>

000000ba <UART_init>:
	{
		UART_transmit_character(str[n]);
		n++;
	}
	UART_transmit_character('\r');
}
  ba:	81 b3       	in	r24, 0x11	; 17
  bc:	82 60       	ori	r24, 0x02	; 2
  be:	81 bb       	out	0x11, r24	; 17
  c0:	81 b3       	in	r24, 0x11	; 17
  c2:	8e 7f       	andi	r24, 0xFE	; 254
  c4:	81 bb       	out	0x11, r24	; 17
  c6:	1b b8       	out	0x0b, r1	; 11
  c8:	88 e1       	ldi	r24, 0x18	; 24
  ca:	8a b9       	out	0x0a, r24	; 10
  cc:	86 e8       	ldi	r24, 0x86	; 134
  ce:	80 bd       	out	0x20, r24	; 32
  d0:	10 bc       	out	0x20, r1	; 32
  d2:	83 e3       	ldi	r24, 0x33	; 51
  d4:	89 b9       	out	0x09, r24	; 9
  d6:	08 95       	ret

000000d8 <UART_transmit_character>:
  d8:	5d 9b       	sbis	0x0b, 5	; 11
  da:	fe cf       	rjmp	.-4      	; 0xd8 <UART_transmit_character>
  dc:	8c b9       	out	0x0c, r24	; 12
  de:	08 95       	ret

000000e0 <UART_println>:
void UART_println(char* str)
{
  e0:	0f 93       	push	r16
  e2:	1f 93       	push	r17
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	8c 01       	movw	r16, r24
	int n = 0;
  ea:	c0 e0       	ldi	r28, 0x00	; 0
  ec:	d0 e0       	ldi	r29, 0x00	; 0
	while(str[n] != '\0')
  ee:	03 c0       	rjmp	.+6      	; 0xf6 <UART_println+0x16>
	{
		UART_transmit_character(str[n]);
  f0:	0e 94 6c 00 	call	0xd8	; 0xd8 <UART_transmit_character>
		n++;
  f4:	21 96       	adiw	r28, 0x01	; 1
	UART_transmit_character('\r');
}
void UART_println(char* str)
{
	int n = 0;
	while(str[n] != '\0')
  f6:	f8 01       	movw	r30, r16
  f8:	ec 0f       	add	r30, r28
  fa:	fd 1f       	adc	r31, r29
  fc:	80 81       	ld	r24, Z
  fe:	81 11       	cpse	r24, r1
 100:	f7 cf       	rjmp	.-18     	; 0xf0 <UART_println+0x10>
	{
		UART_transmit_character(str[n]);
		n++;
	}
	UART_transmit_character('\n');
 102:	8a e0       	ldi	r24, 0x0A	; 10
 104:	0e 94 6c 00 	call	0xd8	; 0xd8 <UART_transmit_character>
	UART_transmit_character('\r');
 108:	8d e0       	ldi	r24, 0x0D	; 13
 10a:	0e 94 6c 00 	call	0xd8	; 0xd8 <UART_transmit_character>
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	1f 91       	pop	r17
 114:	0f 91       	pop	r16
 116:	08 95       	ret

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
