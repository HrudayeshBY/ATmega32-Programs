
timer0_as_counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000609  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000579  00000000  00000000  000007cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000281  00000000  00000000  00000d46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00000fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000329  00000000  00000000  00001018  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009e  00000000  00000000  00001341  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000013df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_11>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_11>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

ISR(TIMER0_OVF_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	8f 93       	push	r24
  7a:	9f 93       	push	r25
	PORTB |= (1<<PB1);
  7c:	88 b3       	in	r24, 0x18	; 24
  7e:	82 60       	ori	r24, 0x02	; 2
  80:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	2f ef       	ldi	r18, 0xFF	; 255
  84:	83 ed       	ldi	r24, 0xD3	; 211
  86:	90 e3       	ldi	r25, 0x30	; 48
  88:	21 50       	subi	r18, 0x01	; 1
  8a:	80 40       	sbci	r24, 0x00	; 0
  8c:	90 40       	sbci	r25, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <__vector_11+0x1c>
  90:	00 c0       	rjmp	.+0      	; 0x92 <__vector_11+0x26>
  92:	00 00       	nop
	_delay_ms(2000);
	PORTB &= ~(1<<PB1);
  94:	88 b3       	in	r24, 0x18	; 24
  96:	8d 7f       	andi	r24, 0xFD	; 253
  98:	88 bb       	out	0x18, r24	; 24
	TIFR |= (1<<TOV0); //clearing the bit in the 
  9a:	88 b7       	in	r24, 0x38	; 56
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	88 bf       	out	0x38, r24	; 56
}
  a0:	9f 91       	pop	r25
  a2:	8f 91       	pop	r24
  a4:	2f 91       	pop	r18
  a6:	0f 90       	pop	r0
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	0f 90       	pop	r0
  ac:	1f 90       	pop	r1
  ae:	18 95       	reti

000000b0 <main>:
int main(void)
{
	sei();
  b0:	78 94       	sei
	DDRB &= ~(1<<PB0);
  b2:	87 b3       	in	r24, 0x17	; 23
  b4:	8e 7f       	andi	r24, 0xFE	; 254
  b6:	87 bb       	out	0x17, r24	; 23
	DDRB |= (1<<PB1);
  b8:	87 b3       	in	r24, 0x17	; 23
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
  be:	18 ba       	out	0x18, r1	; 24
	TCCR0 = 0x07;
  c0:	87 e0       	ldi	r24, 0x07	; 7
  c2:	83 bf       	out	0x33, r24	; 51
	TIMSK = (1<<TOIE0);
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 0xF9;
  c8:	89 ef       	ldi	r24, 0xF9	; 249
  ca:	82 bf       	out	0x32, r24	; 50

    while (1) 
    {
		while((TIFR & 0x01) == 0)
  cc:	08 b6       	in	r0, 0x38	; 56
  ce:	00 fe       	sbrs	r0, 0
  d0:	fd cf       	rjmp	.-6      	; 0xcc <main+0x1c>
		{
			//wait
		}
		TCNT0 = 0xF9;
  d2:	89 ef       	ldi	r24, 0xF9	; 249
  d4:	82 bf       	out	0x32, r24	; 50
    }
  d6:	fa cf       	rjmp	.-12     	; 0xcc <main+0x1c>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
