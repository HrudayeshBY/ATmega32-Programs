
i2c_RTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000114  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00000114  00000188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000724  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000063c  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000308  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  000012c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000352  00000000  00000000  00001334  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000075  00000000  00000000  00001686  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000016fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  7a:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <uart_init>:
#include <avr/io.h>
#include <util/delay.h>

void uart_init()
{
	DDRD |= (1<<PD1);
  82:	81 b3       	in	r24, 0x11	; 17
  84:	82 60       	ori	r24, 0x02	; 2
  86:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~(1<<PD0);
  88:	81 b3       	in	r24, 0x11	; 17
  8a:	8e 7f       	andi	r24, 0xFE	; 254
  8c:	81 bb       	out	0x11, r24	; 17
	UCSRA |= 0x00;
  8e:	8b b1       	in	r24, 0x0b	; 11
  90:	8b b9       	out	0x0b, r24	; 11
	UCSRB |= (1<<RXEN) | (1<<TXEN);
  92:	8a b1       	in	r24, 0x0a	; 10
  94:	88 61       	ori	r24, 0x18	; 24
  96:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
  98:	80 b5       	in	r24, 0x20	; 32
  9a:	86 68       	ori	r24, 0x86	; 134
  9c:	80 bd       	out	0x20, r24	; 32
	UBRRH = 0x00;
  9e:	10 bc       	out	0x20, r1	; 32
	UBRRL = 0x33;
  a0:	83 e3       	ldi	r24, 0x33	; 51
  a2:	89 b9       	out	0x09, r24	; 9
  a4:	08 95       	ret

000000a6 <uart_transmit>:
}

void uart_transmit(char data)
{
	UDR = data;
  a6:	8c b9       	out	0x0c, r24	; 12
	while(!(UCSRA & (1<<UDRE)));
  a8:	5d 9b       	sbis	0x0b, 5	; 11
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <uart_transmit+0x2>
}
  ac:	08 95       	ret

000000ae <uart_receive>:

char uart_receive()
{
	while(!(UCSRA & (1<<RXC)));
  ae:	5f 9b       	sbis	0x0b, 7	; 11
  b0:	fe cf       	rjmp	.-4      	; 0xae <uart_receive>
	return UDR;
  b2:	8c b1       	in	r24, 0x0c	; 12
}
  b4:	08 95       	ret

000000b6 <uart_println>:
void uart_println(char * str)
{
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	ec 01       	movw	r28, r24
	while(*str != '\0')
  bc:	03 c0       	rjmp	.+6      	; 0xc4 <uart_println+0xe>
	{
		uart_transmit(*str);
  be:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_transmit>
		str++;
  c2:	21 96       	adiw	r28, 0x01	; 1
	while(!(UCSRA & (1<<RXC)));
	return UDR;
}
void uart_println(char * str)
{
	while(*str != '\0')
  c4:	88 81       	ld	r24, Y
  c6:	81 11       	cpse	r24, r1
  c8:	fa cf       	rjmp	.-12     	; 0xbe <uart_println+0x8>
	{
		uart_transmit(*str);
		str++;
	}
	uart_transmit('\n');
  ca:	8a e0       	ldi	r24, 0x0A	; 10
  cc:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_transmit>
	uart_transmit('\r');
  d0:	8d e0       	ldi	r24, 0x0D	; 13
  d2:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_transmit>
}
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <main>:

int main(void)
{
	uart_init();
  dc:	0e 94 41 00 	call	0x82	; 0x82 <uart_init>
	
    while (1) 
    {
		uart_println("Enter a Character: ");
  e0:	80 e6       	ldi	r24, 0x60	; 96
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 5b 00 	call	0xb6	; 0xb6 <uart_println>
		char receivedCharacter = uart_receive();
  e8:	0e 94 57 00 	call	0xae	; 0xae <uart_receive>
  ec:	c8 2f       	mov	r28, r24
		uart_println("The character is: ");
  ee:	84 e7       	ldi	r24, 0x74	; 116
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 5b 00 	call	0xb6	; 0xb6 <uart_println>
		uart_transmit(receivedCharacter);
  f6:	8c 2f       	mov	r24, r28
  f8:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	89 e6       	ldi	r24, 0x69	; 105
 100:	98 e1       	ldi	r25, 0x18	; 24
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <main+0x26>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0x30>
 10c:	00 00       	nop
 10e:	e8 cf       	rjmp	.-48     	; 0xe0 <main+0x4>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
