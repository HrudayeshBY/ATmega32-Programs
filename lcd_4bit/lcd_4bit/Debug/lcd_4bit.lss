
lcd_4bit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000001a8  0000021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000860  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000063c  00000000  00000000  00000b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000358  00000000  00000000  00001180  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  000014d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000336  00000000  00000000  00001550  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000205  00000000  00000000  00001886  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001a8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ea       	ldi	r30, 0xA8	; 168
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  7a:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <sendCommand>:
#include <avr/io.h>
#include <util/delay.h>

void sendCommand(char cmd)
{
	PORTC = (cmd & 0xF0);
  82:	98 2f       	mov	r25, r24
  84:	90 7f       	andi	r25, 0xF0	; 240
  86:	95 bb       	out	0x15, r25	; 21
	PORTD = 0x20;
  88:	20 e2       	ldi	r18, 0x20	; 32
  8a:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	3f ef       	ldi	r19, 0xFF	; 255
  8e:	40 e7       	ldi	r20, 0x70	; 112
  90:	92 e0       	ldi	r25, 0x02	; 2
  92:	31 50       	subi	r19, 0x01	; 1
  94:	40 40       	sbci	r20, 0x00	; 0
  96:	90 40       	sbci	r25, 0x00	; 0
  98:	e1 f7       	brne	.-8      	; 0x92 <sendCommand+0x10>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <sendCommand+0x1a>
  9c:	00 00       	nop
	_delay_ms(100);
	PORTD = 0x00;
  9e:	12 ba       	out	0x12, r1	; 18
	PORTC = ((cmd<<4) & 0xF0);
  a0:	30 e1       	ldi	r19, 0x10	; 16
  a2:	83 9f       	mul	r24, r19
  a4:	c0 01       	movw	r24, r0
  a6:	11 24       	eor	r1, r1
  a8:	85 bb       	out	0x15, r24	; 21
	PORTD = 0x20;
  aa:	22 bb       	out	0x12, r18	; 18
  ac:	4f ef       	ldi	r20, 0xFF	; 255
  ae:	80 e7       	ldi	r24, 0x70	; 112
  b0:	92 e0       	ldi	r25, 0x02	; 2
  b2:	41 50       	subi	r20, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <sendCommand+0x30>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <sendCommand+0x3a>
  bc:	00 00       	nop
	_delay_ms(100);
	PORTD = 0x00;
  be:	12 ba       	out	0x12, r1	; 18
  c0:	08 95       	ret

000000c2 <sendData>:
}

void sendData(char data)
{
	PORTC = (data & 0xF0);
  c2:	98 2f       	mov	r25, r24
  c4:	90 7f       	andi	r25, 0xF0	; 240
  c6:	95 bb       	out	0x15, r25	; 21
	PORTD = 0xA0;
  c8:	20 ea       	ldi	r18, 0xA0	; 160
  ca:	22 bb       	out	0x12, r18	; 18
  cc:	3f ef       	ldi	r19, 0xFF	; 255
  ce:	40 e7       	ldi	r20, 0x70	; 112
  d0:	92 e0       	ldi	r25, 0x02	; 2
  d2:	31 50       	subi	r19, 0x01	; 1
  d4:	40 40       	sbci	r20, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <sendData+0x10>
  da:	00 c0       	rjmp	.+0      	; 0xdc <sendData+0x1a>
  dc:	00 00       	nop
	_delay_ms(100);
	PORTD = 0x00;
  de:	12 ba       	out	0x12, r1	; 18
	PORTC = ((data<<4) & 0xF0);
  e0:	30 e1       	ldi	r19, 0x10	; 16
  e2:	83 9f       	mul	r24, r19
  e4:	c0 01       	movw	r24, r0
  e6:	11 24       	eor	r1, r1
  e8:	85 bb       	out	0x15, r24	; 21
	PORTD = 0xA0;
  ea:	22 bb       	out	0x12, r18	; 18
	PORTD = 0x00;
  ec:	12 ba       	out	0x12, r1	; 18
  ee:	08 95       	ret

000000f0 <lcd_init>:
}

void lcd_init()
{
	sendCommand(0x02);
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	0e 94 41 00 	call	0x82	; 0x82 <sendCommand>
	sendCommand(0x28);
  f6:	88 e2       	ldi	r24, 0x28	; 40
  f8:	0e 94 41 00 	call	0x82	; 0x82 <sendCommand>
	sendCommand(0x0E);
  fc:	8e e0       	ldi	r24, 0x0E	; 14
  fe:	0e 94 41 00 	call	0x82	; 0x82 <sendCommand>
	sendCommand(0x01);
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	0e 94 41 00 	call	0x82	; 0x82 <sendCommand>
	sendCommand(0x80);
 108:	80 e8       	ldi	r24, 0x80	; 128
 10a:	0e 94 41 00 	call	0x82	; 0x82 <sendCommand>
 10e:	08 95       	ret

00000110 <display>:
}

void display(char* str)
{
 110:	0f 93       	push	r16
 112:	1f 93       	push	r17
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	8c 01       	movw	r16, r24
	int i = 0;
 11a:	c0 e0       	ldi	r28, 0x00	; 0
 11c:	d0 e0       	ldi	r29, 0x00	; 0
	while(str[i] != '\0')
 11e:	03 c0       	rjmp	.+6      	; 0x126 <display+0x16>
	{
		sendData(str[i]);
 120:	0e 94 61 00 	call	0xc2	; 0xc2 <sendData>
		i++;
 124:	21 96       	adiw	r28, 0x01	; 1
}

void display(char* str)
{
	int i = 0;
	while(str[i] != '\0')
 126:	f8 01       	movw	r30, r16
 128:	ec 0f       	add	r30, r28
 12a:	fd 1f       	adc	r31, r29
 12c:	80 81       	ld	r24, Z
 12e:	81 11       	cpse	r24, r1
 130:	f7 cf       	rjmp	.-18     	; 0x120 <display+0x10>
	{
		sendData(str[i]);
		i++;
	}
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	1f 91       	pop	r17
 138:	0f 91       	pop	r16
 13a:	08 95       	ret

0000013c <main>:
int main(void)
{
	DDRC = 0xF0;
 13c:	80 ef       	ldi	r24, 0xF0	; 240
 13e:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xE0;
 140:	80 ee       	ldi	r24, 0xE0	; 224
 142:	81 bb       	out	0x11, r24	; 17
	PORTC = 0x00;
 144:	15 ba       	out	0x15, r1	; 21
	PORTD = 0x00;
 146:	12 ba       	out	0x12, r1	; 18
	
	lcd_init();
 148:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_init>
	display("Hrudayesh B Y");
 14c:	80 e6       	ldi	r24, 0x60	; 96
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 88 00 	call	0x110	; 0x110 <display>
	sendCommand(0xC0);
 154:	80 ec       	ldi	r24, 0xC0	; 192
 156:	0e 94 41 00 	call	0x82	; 0x82 <sendCommand>
	display("ECE Engineer");
 15a:	8e e6       	ldi	r24, 0x6E	; 110
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 88 00 	call	0x110	; 0x110 <display>
	while (1)
	{
		if((PIND & 0x03) == 0x02)
 162:	80 b3       	in	r24, 0x10	; 16
 164:	83 70       	andi	r24, 0x03	; 3
 166:	82 30       	cpi	r24, 0x02	; 2
 168:	61 f4       	brne	.+24     	; 0x182 <main+0x46>
		{
			sendCommand(0x1C);
 16a:	8c e1       	ldi	r24, 0x1C	; 28
 16c:	0e 94 41 00 	call	0x82	; 0x82 <sendCommand>
 170:	2f ef       	ldi	r18, 0xFF	; 255
 172:	80 e7       	ldi	r24, 0x70	; 112
 174:	92 e0       	ldi	r25, 0x02	; 2
 176:	21 50       	subi	r18, 0x01	; 1
 178:	80 40       	sbci	r24, 0x00	; 0
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <main+0x3a>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0x44>
 180:	00 00       	nop
			_delay_ms(100);
		}
		
		if((PIND & 0x03) == 0x01)
 182:	80 b3       	in	r24, 0x10	; 16
 184:	83 70       	andi	r24, 0x03	; 3
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	61 f7       	brne	.-40     	; 0x162 <main+0x26>
		{
			sendCommand(0x18);
 18a:	88 e1       	ldi	r24, 0x18	; 24
 18c:	0e 94 41 00 	call	0x82	; 0x82 <sendCommand>
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	80 e7       	ldi	r24, 0x70	; 112
 194:	92 e0       	ldi	r25, 0x02	; 2
 196:	21 50       	subi	r18, 0x01	; 1
 198:	80 40       	sbci	r24, 0x00	; 0
 19a:	90 40       	sbci	r25, 0x00	; 0
 19c:	e1 f7       	brne	.-8      	; 0x196 <main+0x5a>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <main+0x64>
 1a0:	00 00       	nop
 1a2:	df cf       	rjmp	.-66     	; 0x162 <main+0x26>

000001a4 <_exit>:
 1a4:	f8 94       	cli

000001a6 <__stop_program>:
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <__stop_program>
