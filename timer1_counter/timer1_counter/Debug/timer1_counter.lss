
timer1_counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000614  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000579  00000000  00000000  000007d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027d  00000000  00000000  00000d51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00000fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032b  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009e  00000000  00000000  0000134b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000013e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_9>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_9>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

ISR (TIMER1_OVF_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	8f 93       	push	r24
  7a:	9f 93       	push	r25
	PORTD = 0x01;
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	2f ef       	ldi	r18, 0xFF	; 255
  82:	89 e6       	ldi	r24, 0x69	; 105
  84:	98 e1       	ldi	r25, 0x18	; 24
  86:	21 50       	subi	r18, 0x01	; 1
  88:	80 40       	sbci	r24, 0x00	; 0
  8a:	90 40       	sbci	r25, 0x00	; 0
  8c:	e1 f7       	brne	.-8      	; 0x86 <__vector_9+0x1a>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <__vector_9+0x24>
  90:	00 00       	nop
	_delay_ms(1000);
	PORTD = 0x00;
  92:	12 ba       	out	0x12, r1	; 18
	TCNT1 = 0xFFFA;
  94:	8a ef       	ldi	r24, 0xFA	; 250
  96:	9f ef       	ldi	r25, 0xFF	; 255
  98:	9d bd       	out	0x2d, r25	; 45
  9a:	8c bd       	out	0x2c, r24	; 44
	TIFR |= (1<<TOV1);
  9c:	88 b7       	in	r24, 0x38	; 56
  9e:	84 60       	ori	r24, 0x04	; 4
  a0:	88 bf       	out	0x38, r24	; 56
	
}
  a2:	9f 91       	pop	r25
  a4:	8f 91       	pop	r24
  a6:	2f 91       	pop	r18
  a8:	0f 90       	pop	r0
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	0f 90       	pop	r0
  ae:	1f 90       	pop	r1
  b0:	18 95       	reti

000000b2 <main>:
int main(void)
{
	DDRD |= (1<<PD0);
  b2:	81 b3       	in	r24, 0x11	; 17
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	81 bb       	out	0x11, r24	; 17
	PORTD |= 0x00;
  b8:	82 b3       	in	r24, 0x12	; 18
  ba:	82 bb       	out	0x12, r24	; 18
	DDRB = 0x00;
  bc:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x00;
  be:	18 ba       	out	0x18, r1	; 24
    sei(); // enabling the global interrupt
  c0:	78 94       	sei
	TCCR1A = 0x00;
  c2:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x07;
  c4:	87 e0       	ldi	r24, 0x07	; 7
  c6:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0xFFFA;
  c8:	8a ef       	ldi	r24, 0xFA	; 250
  ca:	9f ef       	ldi	r25, 0xFF	; 255
  cc:	9d bd       	out	0x2d, r25	; 45
  ce:	8c bd       	out	0x2c, r24	; 44
	TIMSK |= (1<<TOIE1);
  d0:	89 b7       	in	r24, 0x39	; 57
  d2:	84 60       	ori	r24, 0x04	; 4
  d4:	89 bf       	out	0x39, r24	; 57
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <main+0x24>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
