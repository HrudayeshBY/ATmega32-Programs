
I2C_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000001f6  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a34  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000646  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e5  00000000  00000000  000013b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  0000179c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000388  00000000  00000000  00001874  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000038e  00000000  00000000  00001bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001f8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ef       	ldi	r30, 0xF6	; 246
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <main>
  7a:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <i2c_master_init>:

#define PCF8574_ADDR (0x27 << 1)  // Change if I2C scanner gives a different address

void i2c_master_init()
{
	TWSR = 0x00;     // Prescaler = 1
  82:	11 b8       	out	0x01, r1	; 1
	TWBR = 32;       // SCL = 100kHz @ 8MHz
  84:	80 e2       	ldi	r24, 0x20	; 32
  86:	80 b9       	out	0x00, r24	; 0
	TWCR = (1 << TWEN);
  88:	84 e0       	ldi	r24, 0x04	; 4
  8a:	86 bf       	out	0x36, r24	; 54
  8c:	08 95       	ret

0000008e <i2c_start>:
}

void i2c_start()
{
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
  8e:	84 ea       	ldi	r24, 0xA4	; 164
  90:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1 << TWINT)));  // Wait for completion
  92:	06 b6       	in	r0, 0x36	; 54
  94:	07 fe       	sbrs	r0, 7
  96:	fd cf       	rjmp	.-6      	; 0x92 <i2c_start+0x4>
}
  98:	08 95       	ret

0000009a <i2c_stop>:

void i2c_stop()
{
	TWCR = (1 << TWSTO) | (1 << TWINT) | (1 << TWEN);
  9a:	84 e9       	ldi	r24, 0x94	; 148
  9c:	86 bf       	out	0x36, r24	; 54
  9e:	08 95       	ret

000000a0 <i2c_write>:
}

void i2c_write(uint8_t data)
{
	TWDR = data;
  a0:	83 b9       	out	0x03, r24	; 3
	TWCR = (1 << TWINT) | (1 << TWEN);
  a2:	84 e8       	ldi	r24, 0x84	; 132
  a4:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1 << TWINT)));  // Wait for completion
  a6:	06 b6       	in	r0, 0x36	; 54
  a8:	07 fe       	sbrs	r0, 7
  aa:	fd cf       	rjmp	.-6      	; 0xa6 <i2c_write+0x6>
}
  ac:	08 95       	ret

000000ae <i2c_lcd_cmd>:

void i2c_lcd_cmd(uint8_t cmd)
{
  ae:	0f 93       	push	r16
  b0:	1f 93       	push	r17
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
	uint8_t high_nibble = (cmd & 0xF0) | 0x08;  // Backlight ON
  b6:	18 2f       	mov	r17, r24
  b8:	10 7f       	andi	r17, 0xF0	; 240
  ba:	01 2f       	mov	r16, r17
  bc:	08 60       	ori	r16, 0x08	; 8
	uint8_t low_nibble = ((cmd << 4) & 0xF0) | 0x08;
  be:	90 e1       	ldi	r25, 0x10	; 16
  c0:	89 9f       	mul	r24, r25
  c2:	e0 01       	movw	r28, r0
  c4:	11 24       	eor	r1, r1
  c6:	dc 2f       	mov	r29, r28
  c8:	d8 60       	ori	r29, 0x08	; 8

	i2c_start();
  ca:	0e 94 47 00 	call	0x8e	; 0x8e <i2c_start>
	i2c_write(PCF8574_ADDR);
  ce:	8e e4       	ldi	r24, 0x4E	; 78
  d0:	0e 94 50 00 	call	0xa0	; 0xa0 <i2c_write>
	i2c_write(high_nibble | 0x04);  // EN = 1
  d4:	81 2f       	mov	r24, r17
  d6:	8c 60       	ori	r24, 0x0C	; 12
  d8:	0e 94 50 00 	call	0xa0	; 0xa0 <i2c_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	87 ec       	ldi	r24, 0xC7	; 199
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <i2c_lcd_cmd+0x32>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <i2c_lcd_cmd+0x38>
  e6:	00 00       	nop
	_delay_us(100);
	i2c_write(high_nibble & ~0x04); // EN = 0
  e8:	80 2f       	mov	r24, r16
  ea:	0e 94 50 00 	call	0xa0	; 0xa0 <i2c_write>

	i2c_write(low_nibble | 0x04);
  ee:	8c 2f       	mov	r24, r28
  f0:	8c 60       	ori	r24, 0x0C	; 12
  f2:	0e 94 50 00 	call	0xa0	; 0xa0 <i2c_write>
  f6:	87 ec       	ldi	r24, 0xC7	; 199
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <i2c_lcd_cmd+0x4c>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <i2c_lcd_cmd+0x52>
 100:	00 00       	nop
	_delay_us(100);
	i2c_write(low_nibble & ~0x04);
 102:	8d 2f       	mov	r24, r29
 104:	8b 7f       	andi	r24, 0xFB	; 251
 106:	0e 94 50 00 	call	0xa0	; 0xa0 <i2c_write>
	i2c_stop();
 10a:	0e 94 4d 00 	call	0x9a	; 0x9a <i2c_stop>
}
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	1f 91       	pop	r17
 114:	0f 91       	pop	r16
 116:	08 95       	ret

00000118 <i2c_lcd_data>:

void i2c_lcd_data(uint8_t data)
{
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
	uint8_t high_nibble = (data & 0xF0) | 0x09;  // RS = 1
 120:	18 2f       	mov	r17, r24
 122:	10 7f       	andi	r17, 0xF0	; 240
 124:	01 2f       	mov	r16, r17
 126:	09 60       	ori	r16, 0x09	; 9
	uint8_t low_nibble = ((data << 4) & 0xF0) | 0x09;
 128:	90 e1       	ldi	r25, 0x10	; 16
 12a:	89 9f       	mul	r24, r25
 12c:	e0 01       	movw	r28, r0
 12e:	11 24       	eor	r1, r1
 130:	dc 2f       	mov	r29, r28
 132:	d9 60       	ori	r29, 0x09	; 9

	i2c_start();
 134:	0e 94 47 00 	call	0x8e	; 0x8e <i2c_start>
	i2c_write(PCF8574_ADDR);
 138:	8e e4       	ldi	r24, 0x4E	; 78
 13a:	0e 94 50 00 	call	0xa0	; 0xa0 <i2c_write>
	i2c_write(high_nibble | 0x04);
 13e:	81 2f       	mov	r24, r17
 140:	8d 60       	ori	r24, 0x0D	; 13
 142:	0e 94 50 00 	call	0xa0	; 0xa0 <i2c_write>
 146:	87 ec       	ldi	r24, 0xC7	; 199
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <i2c_lcd_data+0x32>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <i2c_lcd_data+0x38>
 150:	00 00       	nop
	_delay_us(100);
	i2c_write(high_nibble & ~0x04);
 152:	80 2f       	mov	r24, r16
 154:	0e 94 50 00 	call	0xa0	; 0xa0 <i2c_write>

	i2c_write(low_nibble | 0x04);
 158:	8c 2f       	mov	r24, r28
 15a:	8d 60       	ori	r24, 0x0D	; 13
 15c:	0e 94 50 00 	call	0xa0	; 0xa0 <i2c_write>
 160:	87 ec       	ldi	r24, 0xC7	; 199
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <i2c_lcd_data+0x4c>
 168:	00 c0       	rjmp	.+0      	; 0x16a <i2c_lcd_data+0x52>
 16a:	00 00       	nop
	_delay_us(100);
	i2c_write(low_nibble & ~0x04);
 16c:	8d 2f       	mov	r24, r29
 16e:	8b 7f       	andi	r24, 0xFB	; 251
 170:	0e 94 50 00 	call	0xa0	; 0xa0 <i2c_write>
	i2c_stop();
 174:	0e 94 4d 00 	call	0x9a	; 0x9a <i2c_stop>
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	0f 91       	pop	r16
 180:	08 95       	ret

00000182 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	2f e7       	ldi	r18, 0x7F	; 127
 184:	88 e3       	ldi	r24, 0x38	; 56
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	21 50       	subi	r18, 0x01	; 1
 18a:	80 40       	sbci	r24, 0x00	; 0
 18c:	90 40       	sbci	r25, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <lcd_init+0x6>
 190:	00 c0       	rjmp	.+0      	; 0x192 <lcd_init+0x10>
 192:	00 00       	nop

void lcd_init()
{
	_delay_ms(50);  // LCD power-up delay

	i2c_lcd_cmd(0x33);
 194:	83 e3       	ldi	r24, 0x33	; 51
 196:	0e 94 57 00 	call	0xae	; 0xae <i2c_lcd_cmd>
	i2c_lcd_cmd(0x32);
 19a:	82 e3       	ldi	r24, 0x32	; 50
 19c:	0e 94 57 00 	call	0xae	; 0xae <i2c_lcd_cmd>
	i2c_lcd_cmd(0x28);
 1a0:	88 e2       	ldi	r24, 0x28	; 40
 1a2:	0e 94 57 00 	call	0xae	; 0xae <i2c_lcd_cmd>
	i2c_lcd_cmd(0x0C);  // Display ON, Cursor OFF
 1a6:	8c e0       	ldi	r24, 0x0C	; 12
 1a8:	0e 94 57 00 	call	0xae	; 0xae <i2c_lcd_cmd>
	i2c_lcd_cmd(0x06);  // Entry mode
 1ac:	86 e0       	ldi	r24, 0x06	; 6
 1ae:	0e 94 57 00 	call	0xae	; 0xae <i2c_lcd_cmd>
	i2c_lcd_cmd(0x01);  // Clear display
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	0e 94 57 00 	call	0xae	; 0xae <i2c_lcd_cmd>
 1b8:	8f e0       	ldi	r24, 0x0F	; 15
 1ba:	97 e2       	ldi	r25, 0x27	; 39
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <lcd_init+0x3a>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <lcd_init+0x40>
 1c2:	00 00       	nop
 1c4:	08 95       	ret

000001c6 <lcd_print>:
	_delay_ms(5);
}

void lcd_print(char *str)
{
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	ec 01       	movw	r28, r24
	while (*str)
 1cc:	03 c0       	rjmp	.+6      	; 0x1d4 <lcd_print+0xe>
	{
		i2c_lcd_data(*str++);
 1ce:	21 96       	adiw	r28, 0x01	; 1
 1d0:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_lcd_data>
	_delay_ms(5);
}

void lcd_print(char *str)
{
	while (*str)
 1d4:	88 81       	ld	r24, Y
 1d6:	81 11       	cpse	r24, r1
 1d8:	fa cf       	rjmp	.-12     	; 0x1ce <lcd_print+0x8>
	{
		i2c_lcd_data(*str++);
	}
}
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <main>:

int main(void)
{
	i2c_master_init();
 1e0:	0e 94 41 00 	call	0x82	; 0x82 <i2c_master_init>
	lcd_init();
 1e4:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_init>
	lcd_print("PU8G");
 1e8:	80 e6       	ldi	r24, 0x60	; 96
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_print>
 1f0:	ff cf       	rjmp	.-2      	; 0x1f0 <main+0x10>

000001f2 <_exit>:
 1f2:	f8 94       	cli

000001f4 <__stop_program>:
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <__stop_program>
