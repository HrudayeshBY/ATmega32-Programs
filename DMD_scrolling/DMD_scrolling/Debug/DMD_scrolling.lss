
DMD_scrolling.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000174  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00000174  000001e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b5  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c0  00000000  00000000  00000949  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d8  00000000  00000000  00000f09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000011e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032d  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014f  00000000  00000000  00001545  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001694  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e7       	ldi	r30, 0x74	; 116
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 b8 00 	jmp	0x170	; 0x170 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#define F_CPU 8000000UL
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	a0 97       	sbiw	r28, 0x20	; 32
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
    DDRD = 0xFF;//port pins connected to column
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF;//port pins connected to rows
  9a:	84 bb       	out	0x14, r24	; 20
	PORTD = 0x00;
  9c:	12 ba       	out	0x12, r1	; 18
	PORTC = 0x00;
  9e:	15 ba       	out	0x15, r1	; 21
	
	unsigned int row[8] = {0xFE,0xFD,0xFB,0xF7,0xEF,0xDF,0xBF,0x7F};
  a0:	80 e1       	ldi	r24, 0x10	; 16
  a2:	e0 e6       	ldi	r30, 0x60	; 96
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	de 01       	movw	r26, r28
  a8:	11 96       	adiw	r26, 0x01	; 1
  aa:	01 90       	ld	r0, Z+
  ac:	0d 92       	st	X+, r0
  ae:	8a 95       	dec	r24
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x28>
	unsigned int col[8] = {0x00,0x00,0X08,0X04,0X3E,0X04,0X08,0x00};
  b2:	80 e1       	ldi	r24, 0x10	; 16
  b4:	e0 e7       	ldi	r30, 0x70	; 112
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	de 01       	movw	r26, r28
  ba:	51 96       	adiw	r26, 0x11	; 17
  bc:	01 90       	ld	r0, Z+
  be:	0d 92       	st	X+, r0
  c0:	8a 95       	dec	r24
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x3a>
	int i,j;

    while (1) 
    {
		for(i=0;i<8;i++)
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	50 e0       	ldi	r21, 0x00	; 0
  c8:	23 c0       	rjmp	.+70     	; 0x110 <main+0x8e>
		{
			for(j=0;j<8;j++)
			{
				PORTC = row[j];
  ca:	fc 01       	movw	r30, r24
  cc:	ee 0f       	add	r30, r30
  ce:	ff 1f       	adc	r31, r31
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	2c 0f       	add	r18, r28
  d6:	3d 1f       	adc	r19, r29
  d8:	e2 0f       	add	r30, r18
  da:	f3 1f       	adc	r31, r19
  dc:	20 81       	ld	r18, Z
  de:	25 bb       	out	0x15, r18	; 21
				PORTD = col[j] >> i;
  e0:	20 89       	ldd	r18, Z+16	; 0x10
  e2:	31 89       	ldd	r19, Z+17	; 0x11
  e4:	04 2e       	mov	r0, r20
  e6:	02 c0       	rjmp	.+4      	; 0xec <main+0x6a>
  e8:	36 95       	lsr	r19
  ea:	27 95       	ror	r18
  ec:	0a 94       	dec	r0
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <main+0x66>
  f0:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	ef e3       	ldi	r30, 0x3F	; 63
  f4:	ff e1       	ldi	r31, 0x1F	; 31
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <main+0x74>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x7a>
  fc:	00 00       	nop

    while (1) 
    {
		for(i=0;i<8;i++)
		{
			for(j=0;j<8;j++)
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	02 c0       	rjmp	.+4      	; 0x106 <main+0x84>
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	88 30       	cpi	r24, 0x08	; 8
 108:	91 05       	cpc	r25, r1
 10a:	fc f2       	brlt	.-66     	; 0xca <main+0x48>
	unsigned int col[8] = {0x00,0x00,0X08,0X04,0X3E,0X04,0X08,0x00};
	int i,j;

    while (1) 
    {
		for(i=0;i<8;i++)
 10c:	4f 5f       	subi	r20, 0xFF	; 255
 10e:	5f 4f       	sbci	r21, 0xFF	; 255
 110:	48 30       	cpi	r20, 0x08	; 8
 112:	51 05       	cpc	r21, r1
 114:	b4 f3       	brlt	.-20     	; 0x102 <main+0x80>
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	70 e0       	ldi	r23, 0x00	; 0
 11a:	26 c0       	rjmp	.+76     	; 0x168 <main+0xe6>
		
		for(i=0;i<8;i++)
		{
			for(j=0;j<8;j++)
			{
				PORTC = row[j];
 11c:	fc 01       	movw	r30, r24
 11e:	ee 0f       	add	r30, r30
 120:	ff 1f       	adc	r31, r31
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	2c 0f       	add	r18, r28
 128:	3d 1f       	adc	r19, r29
 12a:	e2 0f       	add	r30, r18
 12c:	f3 1f       	adc	r31, r19
 12e:	20 81       	ld	r18, Z
 130:	25 bb       	out	0x15, r18	; 21
				PORTD = col[j] << (7-i);
 132:	20 89       	ldd	r18, Z+16	; 0x10
 134:	31 89       	ldd	r19, Z+17	; 0x11
 136:	47 e0       	ldi	r20, 0x07	; 7
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	46 1b       	sub	r20, r22
 13c:	57 0b       	sbc	r21, r23
 13e:	02 c0       	rjmp	.+4      	; 0x144 <main+0xc2>
 140:	22 0f       	add	r18, r18
 142:	33 1f       	adc	r19, r19
 144:	4a 95       	dec	r20
 146:	e2 f7       	brpl	.-8      	; 0x140 <main+0xbe>
 148:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14a:	ef e5       	ldi	r30, 0x5F	; 95
 14c:	f9 e0       	ldi	r31, 0x09	; 9
 14e:	31 97       	sbiw	r30, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <main+0xcc>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0xd2>
 154:	00 00       	nop
			//_delay_ms(10);
		}
		
		for(i=0;i<8;i++)
		{
			for(j=0;j<8;j++)
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	02 c0       	rjmp	.+4      	; 0x15e <main+0xdc>
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	88 30       	cpi	r24, 0x08	; 8
 160:	91 05       	cpc	r25, r1
 162:	e4 f2       	brlt	.-72     	; 0x11c <main+0x9a>
				_delay_ms(4);
			}
			//_delay_ms(10);
		}
		
		for(i=0;i<8;i++)
 164:	6f 5f       	subi	r22, 0xFF	; 255
 166:	7f 4f       	sbci	r23, 0xFF	; 255
 168:	68 30       	cpi	r22, 0x08	; 8
 16a:	71 05       	cpc	r23, r1
 16c:	b4 f3       	brlt	.-20     	; 0x15a <main+0xd8>
 16e:	aa cf       	rjmp	.-172    	; 0xc4 <main+0x42>

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
