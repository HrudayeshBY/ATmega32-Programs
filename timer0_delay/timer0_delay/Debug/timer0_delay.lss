
timer0_delay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ac  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000100  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005a5  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000052b  00000000  00000000  00000739  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000020e  00000000  00000000  00000c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000e74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002df  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000024  00000000  00000000  00001187  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000011ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3f 00 	call	0x7e	; 0x7e <main>
  64:	0c 94 54 00 	jmp	0xa8	; 0xa8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <timer0_delay>:
#define F_CPU 8000000UL
#include <avr/io.h>

void timer0_delay()
{
	TCNT0 = 0x42; // the clock pulses will increment the count in the TCNT0 register
  6c:	82 e4       	ldi	r24, 0x42	; 66
  6e:	82 bf       	out	0x32, r24	; 50
	while((TIFR & 0x01) == 0)
  70:	08 b6       	in	r0, 0x38	; 56
  72:	00 fe       	sbrs	r0, 0
  74:	fd cf       	rjmp	.-6      	; 0x70 <timer0_delay+0x4>
	{
		//keep checking till the interrupt flag is set
	}
	TIFR |= (1<<TOV0); //set the bit to clear it
  76:	88 b7       	in	r24, 0x38	; 56
  78:	81 60       	ori	r24, 0x01	; 1
  7a:	88 bf       	out	0x38, r24	; 56
  7c:	08 95       	ret

0000007e <main>:
}
int main(void)
{
    DDRD |= 0x01;
  7e:	81 b3       	in	r24, 0x11	; 17
  80:	81 60       	ori	r24, 0x01	; 1
  82:	81 bb       	out	0x11, r24	; 17
	PORTD |= 0x00;
  84:	82 b3       	in	r24, 0x12	; 18
  86:	82 bb       	out	0x12, r24	; 18
	TCCR0 = 0x05; //setting the timer in normal mode and prescaler is 1024
  88:	85 e0       	ldi	r24, 0x05	; 5
  8a:	83 bf       	out	0x33, r24	; 51
	short int i;
    while (1) 
    {
		PORTD ^= 0x01;
  8c:	92 b3       	in	r25, 0x12	; 18
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	89 27       	eor	r24, r25
  92:	82 bb       	out	0x12, r24	; 18
		for(i = 0; i < 4; i++)
  94:	c0 e0       	ldi	r28, 0x00	; 0
  96:	d0 e0       	ldi	r29, 0x00	; 0
  98:	03 c0       	rjmp	.+6      	; 0xa0 <main+0x22>
		{
			timer0_delay();
  9a:	0e 94 36 00 	call	0x6c	; 0x6c <timer0_delay>
	TCCR0 = 0x05; //setting the timer in normal mode and prescaler is 1024
	short int i;
    while (1) 
    {
		PORTD ^= 0x01;
		for(i = 0; i < 4; i++)
  9e:	21 96       	adiw	r28, 0x01	; 1
  a0:	c4 30       	cpi	r28, 0x04	; 4
  a2:	d1 05       	cpc	r29, r1
  a4:	d4 f3       	brlt	.-12     	; 0x9a <main+0x1c>
  a6:	f2 cf       	rjmp	.-28     	; 0x8c <main+0xe>

000000a8 <_exit>:
  a8:	f8 94       	cli

000000aa <__stop_program>:
  aa:	ff cf       	rjmp	.-2      	; 0xaa <__stop_program>
