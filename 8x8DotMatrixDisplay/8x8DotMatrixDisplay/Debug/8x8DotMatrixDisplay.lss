
8x8DotMatrixDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000170  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00000170  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c0  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b1  00000000  00000000  00000960  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f0  00000000  00000000  00000f11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001204  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032f  00000000  00000000  00001238  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a3  00000000  00000000  00001567  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000170a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e7       	ldi	r30, 0x70	; 112
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 39       	cpi	r26, 0x90	; 144
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 b6 00 	jmp	0x16c	; 0x16c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <avr/io.h>
#include <util/delay.h>


int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	e0 97       	sbiw	r28, 0x30	; 48
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
    DDRD = 0xFF;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF; //setting port d and c as output. port c will sink the current
  9a:	84 bb       	out	0x14, r24	; 20
	PORTD = 0x00;
  9c:	12 ba       	out	0x12, r1	; 18
	PORTC = 0x00;
  9e:	15 ba       	out	0x15, r1	; 21
	//Program to display the character H and small and big heart emoji on DMD
	unsigned int row[8] = {0xFE,0xFD,0xFB,0xF7,0xEF,0xDF,0xBF,0x7F};
  a0:	80 e1       	ldi	r24, 0x10	; 16
  a2:	e0 e6       	ldi	r30, 0x60	; 96
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	de 01       	movw	r26, r28
  a8:	11 96       	adiw	r26, 0x01	; 1
  aa:	01 90       	ld	r0, Z+
  ac:	0d 92       	st	X+, r0
  ae:	8a 95       	dec	r24
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x28>
	unsigned int col[8] = {
  b2:	80 e1       	ldi	r24, 0x10	; 16
  b4:	e0 e7       	ldi	r30, 0x70	; 112
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	de 01       	movw	r26, r28
  ba:	51 96       	adiw	r26, 0x11	; 17
  bc:	01 90       	ld	r0, Z+
  be:	0d 92       	st	X+, r0
  c0:	8a 95       	dec	r24
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x3a>
							//0xC3,0xC3,0xC3,0XFF,0XFF,0xC3,0xC3,0xC3
							//0x00,0x00,0X6C,0X7C,0X38,0X10,0X00,0X00
							0x00,0x66,0XFF,0XFF,0X7E,0X3C,0X18,0X00
							};
	unsigned int col1[8] = {0x00,0x00,0X6C,0X7C,0X38,0X10,0X00,0X00};
  c4:	80 e1       	ldi	r24, 0x10	; 16
  c6:	e0 e8       	ldi	r30, 0x80	; 128
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	de 01       	movw	r26, r28
  cc:	91 96       	adiw	r26, 0x21	; 33
  ce:	01 90       	ld	r0, Z+
  d0:	0d 92       	st	X+, r0
  d2:	8a 95       	dec	r24
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x4c>
	int i = 0, j = 0;
	
    while (1) 
    {
		for(i = 0; i < 10; i++)
  d6:	40 e0       	ldi	r20, 0x00	; 0
  d8:	50 e0       	ldi	r21, 0x00	; 0
  da:	1c c0       	rjmp	.+56     	; 0x114 <main+0x92>
		{
			for(j = 0; j < 8; j++)
			{
				PORTC = row[j];
  dc:	fc 01       	movw	r30, r24
  de:	ee 0f       	add	r30, r30
  e0:	ff 1f       	adc	r31, r31
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	2c 0f       	add	r18, r28
  e8:	3d 1f       	adc	r19, r29
  ea:	e2 0f       	add	r30, r18
  ec:	f3 1f       	adc	r31, r19
  ee:	20 81       	ld	r18, Z
  f0:	25 bb       	out	0x15, r18	; 21
				PORTD = col[j];
  f2:	20 89       	ldd	r18, Z+16	; 0x10
  f4:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	ef ec       	ldi	r30, 0xCF	; 207
  f8:	f7 e0       	ldi	r31, 0x07	; 7
  fa:	31 97       	sbiw	r30, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <main+0x78>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x7e>
 100:	00 00       	nop
	
    while (1) 
    {
		for(i = 0; i < 10; i++)
		{
			for(j = 0; j < 8; j++)
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	02 c0       	rjmp	.+4      	; 0x10a <main+0x88>
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	88 30       	cpi	r24, 0x08	; 8
 10c:	91 05       	cpc	r25, r1
 10e:	34 f3       	brlt	.-52     	; 0xdc <main+0x5a>
	unsigned int col1[8] = {0x00,0x00,0X6C,0X7C,0X38,0X10,0X00,0X00};
	int i = 0, j = 0;
	
    while (1) 
    {
		for(i = 0; i < 10; i++)
 110:	4f 5f       	subi	r20, 0xFF	; 255
 112:	5f 4f       	sbci	r21, 0xFF	; 255
 114:	4a 30       	cpi	r20, 0x0A	; 10
 116:	51 05       	cpc	r21, r1
 118:	b4 f3       	brlt	.-20     	; 0x106 <main+0x84>
 11a:	8f e1       	ldi	r24, 0x1F	; 31
 11c:	9e e4       	ldi	r25, 0x4E	; 78
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <main+0x9c>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0xa2>
 124:	00 00       	nop
				PORTD = col[j];
				_delay_ms(1);
			}
		}
		_delay_ms(10);
		for(i = 0; i < 10; i++)
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	50 e0       	ldi	r21, 0x00	; 0
 12a:	1c c0       	rjmp	.+56     	; 0x164 <main+0xe2>
		{
			for(j = 0; j < 8; j++)
			{
				PORTC = row[j];
 12c:	fc 01       	movw	r30, r24
 12e:	ee 0f       	add	r30, r30
 130:	ff 1f       	adc	r31, r31
 132:	21 e0       	ldi	r18, 0x01	; 1
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	2c 0f       	add	r18, r28
 138:	3d 1f       	adc	r19, r29
 13a:	e2 0f       	add	r30, r18
 13c:	f3 1f       	adc	r31, r19
 13e:	20 81       	ld	r18, Z
 140:	25 bb       	out	0x15, r18	; 21
				PORTD = col1[j];
 142:	20 a1       	ldd	r18, Z+32	; 0x20
 144:	22 bb       	out	0x12, r18	; 18
 146:	ef ec       	ldi	r30, 0xCF	; 207
 148:	f7 e0       	ldi	r31, 0x07	; 7
 14a:	31 97       	sbiw	r30, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <main+0xc8>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0xce>
 150:	00 00       	nop
			}
		}
		_delay_ms(10);
		for(i = 0; i < 10; i++)
		{
			for(j = 0; j < 8; j++)
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	02 c0       	rjmp	.+4      	; 0x15a <main+0xd8>
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	88 30       	cpi	r24, 0x08	; 8
 15c:	91 05       	cpc	r25, r1
 15e:	34 f3       	brlt	.-52     	; 0x12c <main+0xaa>
				PORTD = col[j];
				_delay_ms(1);
			}
		}
		_delay_ms(10);
		for(i = 0; i < 10; i++)
 160:	4f 5f       	subi	r20, 0xFF	; 255
 162:	5f 4f       	sbci	r21, 0xFF	; 255
 164:	4a 30       	cpi	r20, 0x0A	; 10
 166:	51 05       	cpc	r21, r1
 168:	b4 f3       	brlt	.-20     	; 0x156 <main+0xd4>
 16a:	b5 cf       	rjmp	.-150    	; 0xd6 <main+0x54>

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
