
lcd_string_scroll.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000015e  000001d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007e4  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000063c  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000316  00000000  00000000  000010ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  000013c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000348  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001d5  00000000  00000000  00001784  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001959  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e5       	ldi	r30, 0x5E	; 94
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 80 00 	call	0x100	; 0x100 <main>
  7a:	0c 94 ad 00 	jmp	0x15a	; 0x15a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <sendCommand>:
#include <avr/io.h>
#include <util/delay.h>

void sendCommand(char cmd)
{
	PORTC = cmd;
  82:	85 bb       	out	0x15, r24	; 21
	PORTD = 0x20;
  84:	80 e2       	ldi	r24, 0x20	; 32
  86:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	2f ef       	ldi	r18, 0xFF	; 255
  8a:	80 e7       	ldi	r24, 0x70	; 112
  8c:	92 e0       	ldi	r25, 0x02	; 2
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	80 40       	sbci	r24, 0x00	; 0
  92:	90 40       	sbci	r25, 0x00	; 0
  94:	e1 f7       	brne	.-8      	; 0x8e <sendCommand+0xc>
  96:	00 c0       	rjmp	.+0      	; 0x98 <sendCommand+0x16>
  98:	00 00       	nop
	_delay_ms(100);
	PORTD = 0x00;
  9a:	12 ba       	out	0x12, r1	; 18
  9c:	08 95       	ret

0000009e <sendData>:
}

void sendData(char data)
{
	PORTC = data;
  9e:	85 bb       	out	0x15, r24	; 21
	PORTD = 0xA0;
  a0:	80 ea       	ldi	r24, 0xA0	; 160
  a2:	82 bb       	out	0x12, r24	; 18
  a4:	2f ef       	ldi	r18, 0xFF	; 255
  a6:	80 e7       	ldi	r24, 0x70	; 112
  a8:	92 e0       	ldi	r25, 0x02	; 2
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <sendData+0xc>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <sendData+0x16>
  b4:	00 00       	nop
	_delay_ms(100);
	PORTD = 0x00;	
  b6:	12 ba       	out	0x12, r1	; 18
  b8:	08 95       	ret

000000ba <lcd_init>:
}

void lcd_init()
{
	sendCommand(0x38);
  ba:	88 e3       	ldi	r24, 0x38	; 56
  bc:	0e 94 41 00 	call	0x82	; 0x82 <sendCommand>
	sendCommand(0x01);
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	0e 94 41 00 	call	0x82	; 0x82 <sendCommand>
	sendCommand(0x0E);
  c6:	8e e0       	ldi	r24, 0x0E	; 14
  c8:	0e 94 41 00 	call	0x82	; 0x82 <sendCommand>
	sendCommand(0x80);
  cc:	80 e8       	ldi	r24, 0x80	; 128
  ce:	0e 94 41 00 	call	0x82	; 0x82 <sendCommand>
  d2:	08 95       	ret

000000d4 <display>:
}

void display(char* str)
{
  d4:	0f 93       	push	r16
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	8c 01       	movw	r16, r24
	int i = 0;
  de:	c0 e0       	ldi	r28, 0x00	; 0
  e0:	d0 e0       	ldi	r29, 0x00	; 0
	while(str[i] != '\0')
  e2:	03 c0       	rjmp	.+6      	; 0xea <display+0x16>
	{
		sendData(str[i]);
  e4:	0e 94 4f 00 	call	0x9e	; 0x9e <sendData>
		i++;
  e8:	21 96       	adiw	r28, 0x01	; 1
}

void display(char* str)
{
	int i = 0;
	while(str[i] != '\0')
  ea:	f8 01       	movw	r30, r16
  ec:	ec 0f       	add	r30, r28
  ee:	fd 1f       	adc	r31, r29
  f0:	80 81       	ld	r24, Z
  f2:	81 11       	cpse	r24, r1
  f4:	f7 cf       	rjmp	.-18     	; 0xe4 <display+0x10>
	{
		sendData(str[i]);
		i++;
	}
}
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	1f 91       	pop	r17
  fc:	0f 91       	pop	r16
  fe:	08 95       	ret

00000100 <main>:
int main(void)
{
    DDRC = 0xFF;
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xE0;
 104:	80 ee       	ldi	r24, 0xE0	; 224
 106:	81 bb       	out	0x11, r24	; 17
	PORTC = 0x00;
 108:	15 ba       	out	0x15, r1	; 21
	PORTD = 0x00;
 10a:	12 ba       	out	0x12, r1	; 18
	
	lcd_init();
 10c:	0e 94 5d 00 	call	0xba	; 0xba <lcd_init>
	display("Hrudayesh B Y");
 110:	80 e6       	ldi	r24, 0x60	; 96
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 6a 00 	call	0xd4	; 0xd4 <display>
    while (1) 
    {
		if((PIND & 0x03) == 0x02)
 118:	80 b3       	in	r24, 0x10	; 16
 11a:	83 70       	andi	r24, 0x03	; 3
 11c:	82 30       	cpi	r24, 0x02	; 2
 11e:	61 f4       	brne	.+24     	; 0x138 <main+0x38>
		{
			sendCommand(0x1C);
 120:	8c e1       	ldi	r24, 0x1C	; 28
 122:	0e 94 41 00 	call	0x82	; 0x82 <sendCommand>
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	80 e7       	ldi	r24, 0x70	; 112
 12a:	92 e0       	ldi	r25, 0x02	; 2
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x2c>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x36>
 136:	00 00       	nop
			_delay_ms(100);
		}
		
		if((PIND & 0x03) == 0x01)
 138:	80 b3       	in	r24, 0x10	; 16
 13a:	83 70       	andi	r24, 0x03	; 3
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	61 f7       	brne	.-40     	; 0x118 <main+0x18>
		{
			sendCommand(0x18);
 140:	88 e1       	ldi	r24, 0x18	; 24
 142:	0e 94 41 00 	call	0x82	; 0x82 <sendCommand>
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	80 e7       	ldi	r24, 0x70	; 112
 14a:	92 e0       	ldi	r25, 0x02	; 2
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <main+0x4c>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x56>
 156:	00 00       	nop
 158:	df cf       	rjmp	.-66     	; 0x118 <main+0x18>

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>
