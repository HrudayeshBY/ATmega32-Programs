
SPI_master_DIP_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000124  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ed  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005fe  00000000  00000000  00000909  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f6  00000000  00000000  00000f07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001200  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035f  00000000  00000000  00001270  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012c  00000000  00000000  000015cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000016fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_12>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  64:	0c 94 90 00 	jmp	0x120	; 0x120 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_12>:

#define CS_ON PORTB &= ~(1<<PB4)
#define CS_OFF PORTB |= (1<<PB4)

ISR (SPI_STC_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	8f 93       	push	r24
  7a:	9f 93       	push	r25
	PORTC |= (1<<PC0);
  7c:	85 b3       	in	r24, 0x15	; 21
  7e:	81 60       	ori	r24, 0x01	; 1
  80:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	2f ef       	ldi	r18, 0xFF	; 255
  84:	81 ee       	ldi	r24, 0xE1	; 225
  86:	94 e0       	ldi	r25, 0x04	; 4
  88:	21 50       	subi	r18, 0x01	; 1
  8a:	80 40       	sbci	r24, 0x00	; 0
  8c:	90 40       	sbci	r25, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <__vector_12+0x1c>
  90:	00 c0       	rjmp	.+0      	; 0x92 <__vector_12+0x26>
  92:	00 00       	nop
	_delay_ms(100);
	PORTC &= ~(1<<PC0);
  94:	85 b3       	in	r24, 0x15	; 21
  96:	8e 7f       	andi	r24, 0xFE	; 254
  98:	85 bb       	out	0x15, r24	; 21
  9a:	2f ef       	ldi	r18, 0xFF	; 255
  9c:	81 ee       	ldi	r24, 0xE1	; 225
  9e:	94 e0       	ldi	r25, 0x04	; 4
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	80 40       	sbci	r24, 0x00	; 0
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <__vector_12+0x34>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <__vector_12+0x3e>
  aa:	00 00       	nop
	_delay_ms(100);
	
}
  ac:	9f 91       	pop	r25
  ae:	8f 91       	pop	r24
  b0:	2f 91       	pop	r18
  b2:	0f 90       	pop	r0
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	0f 90       	pop	r0
  b8:	1f 90       	pop	r1
  ba:	18 95       	reti

000000bc <SPI_init>:
void SPI_init()
{
	DDRB |= (1<<PB7) | (1<<PB5) | (1<<PB4);
  bc:	87 b3       	in	r24, 0x17	; 23
  be:	80 6b       	ori	r24, 0xB0	; 176
  c0:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<PB6);
  c2:	87 b3       	in	r24, 0x17	; 23
  c4:	8f 7b       	andi	r24, 0xBF	; 191
  c6:	87 bb       	out	0x17, r24	; 23
	SPCR |= (1<<SPIE) | (1<<SPE) | (1<<MSTR); // SPI as master and interrupt enabled
  c8:	8d b1       	in	r24, 0x0d	; 13
  ca:	80 6d       	ori	r24, 0xD0	; 208
  cc:	8d b9       	out	0x0d, r24	; 13
	SPSR &= ~(1<<SPI2X); //F osc by 4
  ce:	8e b1       	in	r24, 0x0e	; 14
  d0:	8e 7f       	andi	r24, 0xFE	; 254
  d2:	8e b9       	out	0x0e, r24	; 14
  d4:	08 95       	ret

000000d6 <SPI_master_tx>:
}
void SPI_master_tx(uint8_t data)
{
	uint8_t dummy = 0X00;
	SPDR = data;
  d6:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)))
  d8:	77 9b       	sbis	0x0e, 7	; 14
  da:	fe cf       	rjmp	.-4      	; 0xd8 <SPI_master_tx+0x2>
	{
		//wait
	}
	dummy = SPDR; // to clear the SPIF flag we need to read the SPSR register and SPDR register
  dc:	8f b1       	in	r24, 0x0f	; 15
  de:	08 95       	ret

000000e0 <main>:
}
int main(void)
{
	sei();
  e0:	78 94       	sei
	DDRD = 0X00; //PORTD as input
  e2:	11 ba       	out	0x11, r1	; 17
	CS_OFF;
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	80 61       	ori	r24, 0x10	; 16
  e8:	88 bb       	out	0x18, r24	; 24
	PORTD = 0XFF; //internal pull up resistor enabled
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	82 bb       	out	0x12, r24	; 18
	DDRC |= (1<<PC0);
  ee:	84 b3       	in	r24, 0x14	; 20
  f0:	81 60       	ori	r24, 0x01	; 1
  f2:	84 bb       	out	0x14, r24	; 20
	
	SPI_init();
  f4:	0e 94 5e 00 	call	0xbc	; 0xbc <SPI_init>
	//SPI_master_tx();
	uint8_t value = PIND;
  f8:	80 b3       	in	r24, 0x10	; 16
	while (1)
	{
		value = PIND;
  fa:	80 b3       	in	r24, 0x10	; 16
		CS_ON;
  fc:	98 b3       	in	r25, 0x18	; 24
  fe:	9f 7e       	andi	r25, 0xEF	; 239
 100:	98 bb       	out	0x18, r25	; 24
		SPI_master_tx(value);
 102:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_master_tx>
		CS_OFF;
 106:	88 b3       	in	r24, 0x18	; 24
 108:	80 61       	ori	r24, 0x10	; 16
 10a:	88 bb       	out	0x18, r24	; 24
 10c:	2f ef       	ldi	r18, 0xFF	; 255
 10e:	83 ed       	ldi	r24, 0xD3	; 211
 110:	90 e3       	ldi	r25, 0x30	; 48
 112:	21 50       	subi	r18, 0x01	; 1
 114:	80 40       	sbci	r24, 0x00	; 0
 116:	90 40       	sbci	r25, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0x32>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x3c>
 11c:	00 00       	nop
 11e:	ed cf       	rjmp	.-38     	; 0xfa <main+0x1a>

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
