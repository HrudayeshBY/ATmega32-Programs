
lcd_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000172  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000792  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000627  00000000  00000000  000009aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000322  00000000  00000000  00000fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000012f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000334  00000000  00000000  00001348  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000182  00000000  00000000  0000167c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000017fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  64:	0c 94 8d 00 	jmp	0x11a	; 0x11a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <sendCommand>:
#include <avr/io.h>
#include <util/delay.h>

void sendCommand(char cmd)
{
	PORTC = cmd;
  6c:	85 bb       	out	0x15, r24	; 21
	PORTD = 0b00100000;
  6e:	80 e2       	ldi	r24, 0x20	; 32
  70:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  72:	2f ef       	ldi	r18, 0xFF	; 255
  74:	80 e7       	ldi	r24, 0x70	; 112
  76:	92 e0       	ldi	r25, 0x02	; 2
  78:	21 50       	subi	r18, 0x01	; 1
  7a:	80 40       	sbci	r24, 0x00	; 0
  7c:	90 40       	sbci	r25, 0x00	; 0
  7e:	e1 f7       	brne	.-8      	; 0x78 <sendCommand+0xc>
  80:	00 c0       	rjmp	.+0      	; 0x82 <sendCommand+0x16>
  82:	00 00       	nop
	_delay_ms(100);
	PORTD = 0b00000000;
  84:	12 ba       	out	0x12, r1	; 18
  86:	08 95       	ret

00000088 <sendData>:
}

void sendData(char data)
{
	PORTC = data;
  88:	85 bb       	out	0x15, r24	; 21
	PORTD = 0b10100000;
  8a:	80 ea       	ldi	r24, 0xA0	; 160
  8c:	82 bb       	out	0x12, r24	; 18
  8e:	2f ef       	ldi	r18, 0xFF	; 255
  90:	80 e7       	ldi	r24, 0x70	; 112
  92:	92 e0       	ldi	r25, 0x02	; 2
  94:	21 50       	subi	r18, 0x01	; 1
  96:	80 40       	sbci	r24, 0x00	; 0
  98:	90 40       	sbci	r25, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <sendData+0xc>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <sendData+0x16>
  9e:	00 00       	nop
	_delay_ms(100);
	PORTD = 0b00000000;
  a0:	12 ba       	out	0x12, r1	; 18
  a2:	08 95       	ret

000000a4 <lcd_init>:
}

void lcd_init()
{
	sendCommand(0x38);
  a4:	88 e3       	ldi	r24, 0x38	; 56
  a6:	0e 94 36 00 	call	0x6c	; 0x6c <sendCommand>
	sendCommand(0x0E);
  aa:	8e e0       	ldi	r24, 0x0E	; 14
  ac:	0e 94 36 00 	call	0x6c	; 0x6c <sendCommand>
	sendCommand(0x01);
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	0e 94 36 00 	call	0x6c	; 0x6c <sendCommand>
	sendCommand(0x80);
  b6:	80 e8       	ldi	r24, 0x80	; 128
  b8:	0e 94 36 00 	call	0x6c	; 0x6c <sendCommand>
  bc:	08 95       	ret

000000be <main>:
}
int main(void)
{
	int count = 0;
	char c = 0;
	DDRC = 0xFF;
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xE0;
  c2:	80 ee       	ldi	r24, 0xE0	; 224
  c4:	81 bb       	out	0x11, r24	; 17
	PORTC = 0x00;
  c6:	15 ba       	out	0x15, r1	; 21
	PORTD = 0x00;
  c8:	12 ba       	out	0x12, r1	; 18
	lcd_init();
  ca:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_init>
	for(c = 65;c<97;c++)
  ce:	c1 e4       	ldi	r28, 0x41	; 65
	sendCommand(0x01);
	sendCommand(0x80);
}
int main(void)
{
	int count = 0;
  d0:	00 e0       	ldi	r16, 0x00	; 0
  d2:	10 e0       	ldi	r17, 0x00	; 0
	DDRC = 0xFF;
	DDRD = 0xE0;
	PORTC = 0x00;
	PORTD = 0x00;
	lcd_init();
	for(c = 65;c<97;c++)
  d4:	0c c0       	rjmp	.+24     	; 0xee <main+0x30>
	{
		count++;
  d6:	0f 5f       	subi	r16, 0xFF	; 255
  d8:	1f 4f       	sbci	r17, 0xFF	; 255
		if(count == 16)
  da:	00 31       	cpi	r16, 0x10	; 16
  dc:	11 05       	cpc	r17, r1
  de:	19 f4       	brne	.+6      	; 0xe6 <main+0x28>
		{
			sendCommand(0xC0);
  e0:	80 ec       	ldi	r24, 0xC0	; 192
  e2:	0e 94 36 00 	call	0x6c	; 0x6c <sendCommand>
		}
		sendData(c);
  e6:	8c 2f       	mov	r24, r28
  e8:	0e 94 44 00 	call	0x88	; 0x88 <sendData>
	DDRC = 0xFF;
	DDRD = 0xE0;
	PORTC = 0x00;
	PORTD = 0x00;
	lcd_init();
	for(c = 65;c<97;c++)
  ec:	cf 5f       	subi	r28, 0xFF	; 255
  ee:	c1 36       	cpi	r28, 0x61	; 97
  f0:	90 f3       	brcs	.-28     	; 0xd6 <main+0x18>
  f2:	c0 e0       	ldi	r28, 0x00	; 0
  f4:	d0 e0       	ldi	r29, 0x00	; 0
  f6:	0d c0       	rjmp	.+26     	; 0x112 <main+0x54>
		sendData(c);
		
	}
	for(int i = 0;i < 40;i++)
	{
		sendCommand(0x18);
  f8:	88 e1       	ldi	r24, 0x18	; 24
  fa:	0e 94 36 00 	call	0x6c	; 0x6c <sendCommand>
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	80 e7       	ldi	r24, 0x70	; 112
 102:	92 e0       	ldi	r25, 0x02	; 2
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x46>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x50>
 10e:	00 00       	nop
			sendCommand(0xC0);
		}
		sendData(c);
		
	}
	for(int i = 0;i < 40;i++)
 110:	21 96       	adiw	r28, 0x01	; 1
 112:	c8 32       	cpi	r28, 0x28	; 40
 114:	d1 05       	cpc	r29, r1
 116:	84 f3       	brlt	.-32     	; 0xf8 <main+0x3a>
 118:	ff cf       	rjmp	.-2      	; 0x118 <main+0x5a>

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
