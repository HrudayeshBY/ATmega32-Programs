
timer_ctc_prac.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000056e  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004f9  00000000  00000000  000006f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f7  00000000  00000000  00000bef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000de8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002cc  00000000  00000000  00000e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000010d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
	//}
//}

int main(void)
{
	DDRB |= (1<<PB3);
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	88 60       	ori	r24, 0x08	; 8
  70:	87 bb       	out	0x17, r24	; 23
	while (1)
	{
		
		TCCR0 |= (1<<WGM01) | (1<<COM00) | (1<<COM01) | (1<<CS02) | (1<<CS00); //IN CTC mode and set OC0 pin on compare match
  72:	83 b7       	in	r24, 0x33	; 51
  74:	8d 63       	ori	r24, 0x3D	; 61
  76:	83 bf       	out	0x33, r24	; 51
		OCR0 = 127;
  78:	8f e7       	ldi	r24, 0x7F	; 127
  7a:	8c bf       	out	0x3c, r24	; 60
		while (!(TIFR & (1<<OCF0)))
  7c:	08 b6       	in	r0, 0x38	; 56
  7e:	01 fe       	sbrs	r0, 1
  80:	fd cf       	rjmp	.-6      	; 0x7c <main+0x10>
		{
			//wait
		}
		TIFR |= (1<<OCF0); // clearing the output compare flag
  82:	88 b7       	in	r24, 0x38	; 56
  84:	82 60       	ori	r24, 0x02	; 2
  86:	88 bf       	out	0x38, r24	; 56
		TCCR0 = 0x00;
  88:	13 be       	out	0x33, r1	; 51
		TCCR0 |= (1<<WGM01) | (1<<COM01) | (1<<CS02) | (1<<CS00); //IN CTC mode and clear OC0 pin on compare match
  8a:	83 b7       	in	r24, 0x33	; 51
  8c:	8d 62       	ori	r24, 0x2D	; 45
  8e:	83 bf       	out	0x33, r24	; 51
		OCR0 = 127;
  90:	8f e7       	ldi	r24, 0x7F	; 127
  92:	8c bf       	out	0x3c, r24	; 60
		while (!(TIFR & (1<<OCF0)))
  94:	08 b6       	in	r0, 0x38	; 56
  96:	01 fe       	sbrs	r0, 1
  98:	fd cf       	rjmp	.-6      	; 0x94 <main+0x28>
		{
			//wait
		}
		TIFR |= (1<<OCF0); // clearing the output compare flag
  9a:	88 b7       	in	r24, 0x38	; 56
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	88 bf       	out	0x38, r24	; 56
		
		
	}
  a0:	e8 cf       	rjmp	.-48     	; 0x72 <main+0x6>

000000a2 <_exit>:
  a2:	f8 94       	cli

000000a4 <__stop_program>:
  a4:	ff cf       	rjmp	.-2      	; 0xa4 <__stop_program>
