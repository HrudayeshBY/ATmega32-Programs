
uart_tx_rx_interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000266  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000266  000002da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009cf  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068a  00000000  00000000  00000d9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000419  00000000  00000000  00001429  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  00001844  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a1  00000000  00000000  000019ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004bd  00000000  00000000  00001d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000220a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 b3 00 	jmp	0x166	; 0x166 <__vector_13>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__vector_15>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e6       	ldi	r30, 0x66	; 102
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 15 01 	call	0x22a	; 0x22a <main>
  7a:	0c 94 31 01 	jmp	0x262	; 0x262 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <transmitData>:
#include <util/delay.h>
#include <avr/interrupt.h>

void transmitData(char data)
{
	UDR = data;
  82:	8c b9       	out	0x0c, r24	; 12
	while((UCSRA & 0x40) == 0)
  84:	5e 9b       	sbis	0x0b, 6	; 11
  86:	fe cf       	rjmp	.-4      	; 0x84 <transmitData+0x2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	2f ef       	ldi	r18, 0xFF	; 255
  8a:	80 e7       	ldi	r24, 0x70	; 112
  8c:	92 e0       	ldi	r25, 0x02	; 2
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	80 40       	sbci	r24, 0x00	; 0
  92:	90 40       	sbci	r25, 0x00	; 0
  94:	e1 f7       	brne	.-8      	; 0x8e <transmitData+0xc>
  96:	00 c0       	rjmp	.+0      	; 0x98 <transmitData+0x16>
  98:	00 00       	nop
  9a:	08 95       	ret

0000009c <receiveData>:
	_delay_ms(100);
}

char receiveData()
{
	while((UCSRA & 0x80) == 0)
  9c:	5f 9b       	sbis	0x0b, 7	; 11
  9e:	fe cf       	rjmp	.-4      	; 0x9c <receiveData>
	{
		//wait
	}
	char incomingData = UDR;
  a0:	8c b1       	in	r24, 0x0c	; 12
	return incomingData;
	_delay_ms(100);
}
  a2:	08 95       	ret

000000a4 <uart_init>:

void uart_init()
{
	DDRD |= 0x02;
  a4:	81 b3       	in	r24, 0x11	; 17
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;
  aa:	12 ba       	out	0x12, r1	; 18
	UCSRA = 0x00; UCSRB = 0xD8;// the TXCIE and RXCIE made is set
  ac:	1b b8       	out	0x0b, r1	; 11
  ae:	88 ed       	ldi	r24, 0xD8	; 216
  b0:	8a b9       	out	0x0a, r24	; 10
	UCSRC = 0x06;
  b2:	86 e0       	ldi	r24, 0x06	; 6
  b4:	80 bd       	out	0x20, r24	; 32
	UBRRH = 0x00; UBRRL = 0x33;
  b6:	10 bc       	out	0x20, r1	; 32
  b8:	83 e3       	ldi	r24, 0x33	; 51
  ba:	89 b9       	out	0x09, r24	; 9
  bc:	08 95       	ret

000000be <lcd_data>:
}

void lcd_data(char data)
{
	PORTC = data;
  be:	85 bb       	out	0x15, r24	; 21
	PORTD = 0x20;
  c0:	80 e2       	ldi	r24, 0x20	; 32
  c2:	82 bb       	out	0x12, r24	; 18
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	80 e7       	ldi	r24, 0x70	; 112
  c8:	92 e0       	ldi	r25, 0x02	; 2
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <lcd_data+0xc>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <lcd_data+0x16>
  d4:	00 00       	nop
	_delay_ms(100);
	PORTD = 0x00;
  d6:	12 ba       	out	0x12, r1	; 18
  d8:	08 95       	ret

000000da <lcd_command>:
}

void lcd_command(char cmd)
{
	PORTC = cmd;
  da:	85 bb       	out	0x15, r24	; 21
	PORTD = 0xA0;
  dc:	80 ea       	ldi	r24, 0xA0	; 160
  de:	82 bb       	out	0x12, r24	; 18
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	80 e7       	ldi	r24, 0x70	; 112
  e4:	92 e0       	ldi	r25, 0x02	; 2
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <lcd_command+0xc>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <lcd_command+0x16>
  f0:	00 00       	nop
	_delay_ms(100);
	PORTD = 0x00;
  f2:	12 ba       	out	0x12, r1	; 18
  f4:	08 95       	ret

000000f6 <lcd_init>:
}

void lcd_init()
{
	DDRD |= 0xE0;
  f6:	81 b3       	in	r24, 0x11	; 17
  f8:	80 6e       	ori	r24, 0xE0	; 224
  fa:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF;
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	84 bb       	out	0x14, r24	; 20
	lcd_command(0x38);
 100:	88 e3       	ldi	r24, 0x38	; 56
 102:	0e 94 6d 00 	call	0xda	; 0xda <lcd_command>
	lcd_command(0x0E);
 106:	8e e0       	ldi	r24, 0x0E	; 14
 108:	0e 94 6d 00 	call	0xda	; 0xda <lcd_command>
	lcd_command(0x01);
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	0e 94 6d 00 	call	0xda	; 0xda <lcd_command>
	lcd_command(0x80);
 112:	80 e8       	ldi	r24, 0x80	; 128
 114:	0e 94 6d 00 	call	0xda	; 0xda <lcd_command>
 118:	08 95       	ret

0000011a <lcd_clear>:
}

void lcd_clear()
{
	lcd_command(0x01);
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	0e 94 6d 00 	call	0xda	; 0xda <lcd_command>
	lcd_command(0x80);
 120:	80 e8       	ldi	r24, 0x80	; 128
 122:	0e 94 6d 00 	call	0xda	; 0xda <lcd_command>
 126:	08 95       	ret

00000128 <lcd_display>:
}

void lcd_display(char* msg)
{
 128:	0f 93       	push	r16
 12a:	1f 93       	push	r17
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	8c 01       	movw	r16, r24
	int i = 0;
 132:	c0 e0       	ldi	r28, 0x00	; 0
 134:	d0 e0       	ldi	r29, 0x00	; 0
	while(msg[i] != '\0')
 136:	0c c0       	rjmp	.+24     	; 0x150 <lcd_display+0x28>
	{
		lcd_data(msg[i]);
 138:	0e 94 5f 00 	call	0xbe	; 0xbe <lcd_data>
		i++;
 13c:	21 96       	adiw	r28, 0x01	; 1
 13e:	2f ef       	ldi	r18, 0xFF	; 255
 140:	80 e7       	ldi	r24, 0x70	; 112
 142:	92 e0       	ldi	r25, 0x02	; 2
 144:	21 50       	subi	r18, 0x01	; 1
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <lcd_display+0x1c>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <lcd_display+0x26>
 14e:	00 00       	nop
}

void lcd_display(char* msg)
{
	int i = 0;
	while(msg[i] != '\0')
 150:	f8 01       	movw	r30, r16
 152:	ec 0f       	add	r30, r28
 154:	fd 1f       	adc	r31, r29
 156:	80 81       	ld	r24, Z
 158:	81 11       	cpse	r24, r1
 15a:	ee cf       	rjmp	.-36     	; 0x138 <lcd_display+0x10>
		lcd_data(msg[i]);
		i++;
		_delay_ms(100);
	}
	
}
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	1f 91       	pop	r17
 162:	0f 91       	pop	r16
 164:	08 95       	ret

00000166 <__vector_13>:

ISR(USART_RXC_vect)
{
 166:	1f 92       	push	r1
 168:	0f 92       	push	r0
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	0f 92       	push	r0
 16e:	11 24       	eor	r1, r1
 170:	2f 93       	push	r18
 172:	3f 93       	push	r19
 174:	4f 93       	push	r20
 176:	5f 93       	push	r21
 178:	6f 93       	push	r22
 17a:	7f 93       	push	r23
 17c:	8f 93       	push	r24
 17e:	9f 93       	push	r25
 180:	af 93       	push	r26
 182:	bf 93       	push	r27
 184:	ef 93       	push	r30
 186:	ff 93       	push	r31
	lcd_clear();
 188:	0e 94 8d 00 	call	0x11a	; 0x11a <lcd_clear>
	lcd_display("Rx Complete");
 18c:	80 e6       	ldi	r24, 0x60	; 96
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 94 00 	call	0x128	; 0x128 <lcd_display>
 194:	2f ef       	ldi	r18, 0xFF	; 255
 196:	89 e6       	ldi	r24, 0x69	; 105
 198:	98 e1       	ldi	r25, 0x18	; 24
 19a:	21 50       	subi	r18, 0x01	; 1
 19c:	80 40       	sbci	r24, 0x00	; 0
 19e:	90 40       	sbci	r25, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <__vector_13+0x34>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <__vector_13+0x3e>
 1a4:	00 00       	nop
	_delay_ms(1000);
}
 1a6:	ff 91       	pop	r31
 1a8:	ef 91       	pop	r30
 1aa:	bf 91       	pop	r27
 1ac:	af 91       	pop	r26
 1ae:	9f 91       	pop	r25
 1b0:	8f 91       	pop	r24
 1b2:	7f 91       	pop	r23
 1b4:	6f 91       	pop	r22
 1b6:	5f 91       	pop	r21
 1b8:	4f 91       	pop	r20
 1ba:	3f 91       	pop	r19
 1bc:	2f 91       	pop	r18
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <__vector_15>:

ISR(USART_TXC_vect)
{
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	2f 93       	push	r18
 1d4:	3f 93       	push	r19
 1d6:	4f 93       	push	r20
 1d8:	5f 93       	push	r21
 1da:	6f 93       	push	r22
 1dc:	7f 93       	push	r23
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
 1e2:	af 93       	push	r26
 1e4:	bf 93       	push	r27
 1e6:	ef 93       	push	r30
 1e8:	ff 93       	push	r31
	lcd_clear();
 1ea:	0e 94 8d 00 	call	0x11a	; 0x11a <lcd_clear>
	lcd_display("Tx Complete");
 1ee:	8c e6       	ldi	r24, 0x6C	; 108
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 94 00 	call	0x128	; 0x128 <lcd_display>
 1f6:	2f ef       	ldi	r18, 0xFF	; 255
 1f8:	89 e6       	ldi	r24, 0x69	; 105
 1fa:	98 e1       	ldi	r25, 0x18	; 24
 1fc:	21 50       	subi	r18, 0x01	; 1
 1fe:	80 40       	sbci	r24, 0x00	; 0
 200:	90 40       	sbci	r25, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <__vector_15+0x34>
 204:	00 c0       	rjmp	.+0      	; 0x206 <__vector_15+0x3e>
 206:	00 00       	nop
	_delay_ms(1000);

}
 208:	ff 91       	pop	r31
 20a:	ef 91       	pop	r30
 20c:	bf 91       	pop	r27
 20e:	af 91       	pop	r26
 210:	9f 91       	pop	r25
 212:	8f 91       	pop	r24
 214:	7f 91       	pop	r23
 216:	6f 91       	pop	r22
 218:	5f 91       	pop	r21
 21a:	4f 91       	pop	r20
 21c:	3f 91       	pop	r19
 21e:	2f 91       	pop	r18
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <main>:
int main(void)
{
	char data;
	//PORTD = 0x00; PORTC = 0x00;
	lcd_init();
 22a:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_init>
	uart_init();
 22e:	0e 94 52 00 	call	0xa4	; 0xa4 <uart_init>
	sei(); //global interrupt enable
 232:	78 94       	sei
    while (1) 
    {
		data = receiveData();
 234:	0e 94 4e 00 	call	0x9c	; 0x9c <receiveData>
 238:	2f ef       	ldi	r18, 0xFF	; 255
 23a:	39 e6       	ldi	r19, 0x69	; 105
 23c:	98 e1       	ldi	r25, 0x18	; 24
 23e:	21 50       	subi	r18, 0x01	; 1
 240:	30 40       	sbci	r19, 0x00	; 0
 242:	90 40       	sbci	r25, 0x00	; 0
 244:	e1 f7       	brne	.-8      	; 0x23e <main+0x14>
 246:	00 c0       	rjmp	.+0      	; 0x248 <main+0x1e>
 248:	00 00       	nop
		_delay_ms(1000);
		transmitData(data);
 24a:	0e 94 41 00 	call	0x82	; 0x82 <transmitData>
 24e:	2f ef       	ldi	r18, 0xFF	; 255
 250:	39 e6       	ldi	r19, 0x69	; 105
 252:	88 e1       	ldi	r24, 0x18	; 24
 254:	21 50       	subi	r18, 0x01	; 1
 256:	30 40       	sbci	r19, 0x00	; 0
 258:	80 40       	sbci	r24, 0x00	; 0
 25a:	e1 f7       	brne	.-8      	; 0x254 <main+0x2a>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0x34>
 25e:	00 00       	nop
 260:	e9 cf       	rjmp	.-46     	; 0x234 <main+0xa>

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
