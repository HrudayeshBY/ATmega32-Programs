
ext_interrupt_prac.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000174  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000073c  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a5  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ee  00000000  00000000  00000f45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  00001234  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000335  00000000  00000000  000012b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000214  00000000  00000000  000015e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000017f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 89 00 	call	0x112	; 0x112 <main>
  64:	0c 94 b8 00 	jmp	0x170	; 0x170 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_1>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

ISR(INT0_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	8f 93       	push	r24
  7a:	9f 93       	push	r25
	PORTC = 0x01;
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	2f ef       	ldi	r18, 0xFF	; 255
  82:	89 e6       	ldi	r24, 0x69	; 105
  84:	98 e1       	ldi	r25, 0x18	; 24
  86:	21 50       	subi	r18, 0x01	; 1
  88:	80 40       	sbci	r24, 0x00	; 0
  8a:	90 40       	sbci	r25, 0x00	; 0
  8c:	e1 f7       	brne	.-8      	; 0x86 <__vector_1+0x1a>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <__vector_1+0x24>
  90:	00 00       	nop
	_delay_ms(1000);
	PORTC = 0x00;
  92:	15 ba       	out	0x15, r1	; 21
  94:	2f ef       	ldi	r18, 0xFF	; 255
  96:	89 e6       	ldi	r24, 0x69	; 105
  98:	98 e1       	ldi	r25, 0x18	; 24
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	80 40       	sbci	r24, 0x00	; 0
  9e:	90 40       	sbci	r25, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <__vector_1+0x2e>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <__vector_1+0x38>
  a4:	00 00       	nop
	_delay_ms(1000);
	
	GIFR |= (1<<INTF0); // clearing the INT0 flag by writing one to it
  a6:	8a b7       	in	r24, 0x3a	; 58
  a8:	80 64       	ori	r24, 0x40	; 64
  aa:	8a bf       	out	0x3a, r24	; 58
}
  ac:	9f 91       	pop	r25
  ae:	8f 91       	pop	r24
  b0:	2f 91       	pop	r18
  b2:	0f 90       	pop	r0
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	0f 90       	pop	r0
  b8:	1f 90       	pop	r1
  ba:	18 95       	reti

000000bc <__vector_3>:

ISR(INT2_vect)
{
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	2f 93       	push	r18
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
	PORTC |= (1<<PC1);
  cc:	85 b3       	in	r24, 0x15	; 21
  ce:	82 60       	ori	r24, 0x02	; 2
  d0:	85 bb       	out	0x15, r24	; 21
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	80 e7       	ldi	r24, 0x70	; 112
  d6:	92 e0       	ldi	r25, 0x02	; 2
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <__vector_3+0x1c>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <__vector_3+0x26>
  e2:	00 00       	nop
	_delay_ms(100);
	PORTC &= ~(1<<PC1);
  e4:	85 b3       	in	r24, 0x15	; 21
  e6:	8d 7f       	andi	r24, 0xFD	; 253
  e8:	85 bb       	out	0x15, r24	; 21
  ea:	2f ef       	ldi	r18, 0xFF	; 255
  ec:	80 e7       	ldi	r24, 0x70	; 112
  ee:	92 e0       	ldi	r25, 0x02	; 2
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <__vector_3+0x34>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <__vector_3+0x3e>
  fa:	00 00       	nop
	_delay_ms(100);
	
	GIFR |= (1<<INTF2); //clearing the flag
  fc:	8a b7       	in	r24, 0x3a	; 58
  fe:	80 62       	ori	r24, 0x20	; 32
 100:	8a bf       	out	0x3a, r24	; 58
}
 102:	9f 91       	pop	r25
 104:	8f 91       	pop	r24
 106:	2f 91       	pop	r18
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <main>:
int main(void)
{
	//I am using INT0 which is multiplexed with PD2
	DDRD |= (1<<PD0); //LED is connected to this pin
 112:	81 b3       	in	r24, 0x11	; 17
 114:	81 60       	ori	r24, 0x01	; 1
 116:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~(1<<PD2); // INT0 pin
 118:	81 b3       	in	r24, 0x11	; 17
 11a:	8b 7f       	andi	r24, 0xFB	; 251
 11c:	81 bb       	out	0x11, r24	; 17
	DDRB &= ~(1<<PB2);
 11e:	87 b3       	in	r24, 0x17	; 23
 120:	8b 7f       	andi	r24, 0xFB	; 251
 122:	87 bb       	out	0x17, r24	; 23
	DDRC |= (1<<PC0) | (1<<PC1);
 124:	84 b3       	in	r24, 0x14	; 20
 126:	83 60       	ori	r24, 0x03	; 3
 128:	84 bb       	out	0x14, r24	; 20
	
	//configuring the interrupts
	MCUCR &= ~(1<<ISC00) & ~(1<<ISC01); // rising edge will cause the interrupt
 12a:	85 b7       	in	r24, 0x35	; 53
 12c:	8c 7f       	andi	r24, 0xFC	; 252
 12e:	85 bf       	out	0x35, r24	; 53
	MCUCSR |= (1<<ISC2);
 130:	84 b7       	in	r24, 0x34	; 52
 132:	80 64       	ori	r24, 0x40	; 64
 134:	84 bf       	out	0x34, r24	; 52
	GICR |= (1<<INT0)| (1<<INT2); //enabling the interrupt INT0
 136:	8b b7       	in	r24, 0x3b	; 59
 138:	80 66       	ori	r24, 0x60	; 96
 13a:	8b bf       	out	0x3b, r24	; 59
	sei(); // global interrupt enable
 13c:	78 94       	sei
	
	while (1)
	{
		//LED will be toggling in this loop
		PORTD |= (1<<PD0);
 13e:	82 b3       	in	r24, 0x12	; 18
 140:	81 60       	ori	r24, 0x01	; 1
 142:	82 bb       	out	0x12, r24	; 18
 144:	2f e7       	ldi	r18, 0x7F	; 127
 146:	8a e1       	ldi	r24, 0x1A	; 26
 148:	96 e0       	ldi	r25, 0x06	; 6
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <main+0x38>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0x42>
 154:	00 00       	nop
		_delay_ms(250);
		PORTD &= ~(1<<PD0);
 156:	82 b3       	in	r24, 0x12	; 18
 158:	8e 7f       	andi	r24, 0xFE	; 254
 15a:	82 bb       	out	0x12, r24	; 18
 15c:	2f e7       	ldi	r18, 0x7F	; 127
 15e:	8a e1       	ldi	r24, 0x1A	; 26
 160:	96 e0       	ldi	r25, 0x06	; 6
 162:	21 50       	subi	r18, 0x01	; 1
 164:	80 40       	sbci	r24, 0x00	; 0
 166:	90 40       	sbci	r25, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <main+0x50>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0x5a>
 16c:	00 00       	nop
 16e:	e7 cf       	rjmp	.-50     	; 0x13e <main+0x2c>

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
