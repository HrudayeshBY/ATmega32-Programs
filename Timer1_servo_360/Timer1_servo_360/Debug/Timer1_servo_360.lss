
Timer1_servo_360.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000579  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004f9  00000000  00000000  00000715  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001ed  00000000  00000000  00000c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d9  00000000  00000000  00000e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000010f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
    DDRD |= (1<<PB5); //OC1A pin as output
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	80 62       	ori	r24, 0x20	; 32
  70:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~(1<<PD0) & ~(1<<PB1); // input pins to switch direction
  72:	81 b3       	in	r24, 0x11	; 17
  74:	8c 7f       	andi	r24, 0xFC	; 252
  76:	81 bb       	out	0x11, r24	; 17
	TCCR1A = 0x82; TCCR1B = 0x1B;
  78:	82 e8       	ldi	r24, 0x82	; 130
  7a:	8f bd       	out	0x2f, r24	; 47
  7c:	8b e1       	ldi	r24, 0x1B	; 27
  7e:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 2499;
  80:	83 ec       	ldi	r24, 0xC3	; 195
  82:	99 e0       	ldi	r25, 0x09	; 9
  84:	97 bd       	out	0x27, r25	; 39
  86:	86 bd       	out	0x26, r24	; 38
	OCR1A = 186; // no rotation
  88:	8a eb       	ldi	r24, 0xBA	; 186
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	9b bd       	out	0x2b, r25	; 43
  8e:	8a bd       	out	0x2a, r24	; 42
  90:	04 c0       	rjmp	.+8      	; 0x9a <main+0x2e>

    while (1) 
    {
		while(!(PIND & (1<<PD0)))
		{
			OCR1A = 65;
  92:	81 e4       	ldi	r24, 0x41	; 65
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	9b bd       	out	0x2b, r25	; 43
  98:	8a bd       	out	0x2a, r24	; 42
	ICR1 = 2499;
	OCR1A = 186; // no rotation

    while (1) 
    {
		while(!(PIND & (1<<PD0)))
  9a:	80 9b       	sbis	0x10, 0	; 16
  9c:	fa cf       	rjmp	.-12     	; 0x92 <main+0x26>
  9e:	04 c0       	rjmp	.+8      	; 0xa8 <main+0x3c>
			OCR1A = 65;
		
		}
		while(!(PIND & (1<<PD1)))
		{
			OCR1A = 300;
  a0:	8c e2       	ldi	r24, 0x2C	; 44
  a2:	91 e0       	ldi	r25, 0x01	; 1
  a4:	9b bd       	out	0x2b, r25	; 43
  a6:	8a bd       	out	0x2a, r24	; 42
		while(!(PIND & (1<<PD0)))
		{
			OCR1A = 65;
		
		}
		while(!(PIND & (1<<PD1)))
  a8:	81 9b       	sbis	0x10, 1	; 16
  aa:	fa cf       	rjmp	.-12     	; 0xa0 <main+0x34>
		{
			OCR1A = 300;
		}
		OCR1A = 186; // no rotation
  ac:	8a eb       	ldi	r24, 0xBA	; 186
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	9b bd       	out	0x2b, r25	; 43
  b2:	8a bd       	out	0x2a, r24	; 42
		
    }
  b4:	f2 cf       	rjmp	.-28     	; 0x9a <main+0x2e>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
