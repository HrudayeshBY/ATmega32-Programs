
timer1_led_motor_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000124  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000057e  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000508  00000000  00000000  000006fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000201  00000000  00000000  00000c06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ea  00000000  00000000  00000e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001f  00000000  00000000  00001116  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001135  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4d 00 	jmp	0x9a	; 0x9a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRB |= (1<<PB3); // OC0 pin as output
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	88 60       	ori	r24, 0x08	; 8
  70:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<PB0) & ~(1<<PB1); // input pins
  72:	87 b3       	in	r24, 0x17	; 23
  74:	8c 7f       	andi	r24, 0xFC	; 252
  76:	87 bb       	out	0x17, r24	; 23
	TCCR0 = 0x69;
  78:	89 e6       	ldi	r24, 0x69	; 105
  7a:	83 bf       	out	0x33, r24	; 51
	uint8_t dutyCycle = 0;
	OCR0 = dutyCycle;
  7c:	1c be       	out	0x3c, r1	; 60
int main(void)
{
	DDRB |= (1<<PB3); // OC0 pin as output
	DDRB &= ~(1<<PB0) & ~(1<<PB1); // input pins
	TCCR0 = 0x69;
	uint8_t dutyCycle = 0;
  7e:	80 e0       	ldi	r24, 0x00	; 0
	OCR0 = dutyCycle;
    while (1) 
    {
		if(!(PINB & (1<<PB0)))
  80:	b0 99       	sbic	0x16, 0	; 22
  82:	04 c0       	rjmp	.+8      	; 0x8c <main+0x20>
		{
			while(!(PINB & (1<<PB0)));
  84:	b0 9b       	sbis	0x16, 0	; 22
  86:	fe cf       	rjmp	.-4      	; 0x84 <main+0x18>
			dutyCycle += 10;
  88:	86 5f       	subi	r24, 0xF6	; 246
			OCR0 = dutyCycle;
  8a:	8c bf       	out	0x3c, r24	; 60
		}
		
		if(!(PINB & (1<<PB1)))
  8c:	b1 99       	sbic	0x16, 1	; 22
  8e:	f8 cf       	rjmp	.-16     	; 0x80 <main+0x14>
		{
			while(!(PINB & (1<<PB0)));
  90:	b0 9b       	sbis	0x16, 0	; 22
  92:	fe cf       	rjmp	.-4      	; 0x90 <main+0x24>
			dutyCycle -= 10;
  94:	8a 50       	subi	r24, 0x0A	; 10
			OCR0 = dutyCycle;
  96:	8c bf       	out	0x3c, r24	; 60
  98:	f3 cf       	rjmp	.-26     	; 0x80 <main+0x14>

0000009a <_exit>:
  9a:	f8 94       	cli

0000009c <__stop_program>:
  9c:	ff cf       	rjmp	.-2      	; 0x9c <__stop_program>
