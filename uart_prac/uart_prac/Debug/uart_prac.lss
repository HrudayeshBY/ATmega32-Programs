
uart_prac.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000018c  00000200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000804  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000635  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000332  00000000  00000000  000010f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  0000142c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034f  00000000  00000000  000014b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000027c  00000000  00000000  00001807  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001a83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 41 00 	jmp	0x82	; 0x82 <__vector_15>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e8       	ldi	r30, 0x8C	; 140
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 b1 00 	call	0x162	; 0x162 <main>
  7a:	0c 94 c4 00 	jmp	0x188	; 0x188 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__vector_15>:
#include <util/delay.h>
#include <avr/interrupt.h>

char msg[] = "Hi I am ATmega32\n\r";
ISR(USART_TXC_vect)
{
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	2f 93       	push	r18
  8e:	8f 93       	push	r24
  90:	9f 93       	push	r25
	PORTD |= (1<<PD2);
  92:	82 b3       	in	r24, 0x12	; 18
  94:	84 60       	ori	r24, 0x04	; 4
  96:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	2f ef       	ldi	r18, 0xFF	; 255
  9a:	80 e7       	ldi	r24, 0x70	; 112
  9c:	92 e0       	ldi	r25, 0x02	; 2
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	80 40       	sbci	r24, 0x00	; 0
  a2:	90 40       	sbci	r25, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <__vector_15+0x1c>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <__vector_15+0x26>
  a8:	00 00       	nop
	_delay_ms(100);
	PORTD &= ~(1<<PD2);
  aa:	82 b3       	in	r24, 0x12	; 18
  ac:	8b 7f       	andi	r24, 0xFB	; 251
  ae:	82 bb       	out	0x12, r24	; 18
  b0:	2f ef       	ldi	r18, 0xFF	; 255
  b2:	80 e7       	ldi	r24, 0x70	; 112
  b4:	92 e0       	ldi	r25, 0x02	; 2
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	80 40       	sbci	r24, 0x00	; 0
  ba:	90 40       	sbci	r25, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <__vector_15+0x34>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <__vector_15+0x3e>
  c0:	00 00       	nop
	_delay_ms(100);
	PORTD |= (1<<PD2);
  c2:	82 b3       	in	r24, 0x12	; 18
  c4:	84 60       	ori	r24, 0x04	; 4
  c6:	82 bb       	out	0x12, r24	; 18
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	80 e7       	ldi	r24, 0x70	; 112
  cc:	92 e0       	ldi	r25, 0x02	; 2
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <__vector_15+0x4c>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <__vector_15+0x56>
  d8:	00 00       	nop
	_delay_ms(100);
	PORTD &= ~(1<<PD2);
  da:	82 b3       	in	r24, 0x12	; 18
  dc:	8b 7f       	andi	r24, 0xFB	; 251
  de:	82 bb       	out	0x12, r24	; 18
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	80 e7       	ldi	r24, 0x70	; 112
  e4:	92 e0       	ldi	r25, 0x02	; 2
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <__vector_15+0x64>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <__vector_15+0x6e>
  f0:	00 00       	nop
	_delay_ms(100);
	UCSRA |= (1<<TXC);
  f2:	8b b1       	in	r24, 0x0b	; 11
  f4:	80 64       	ori	r24, 0x40	; 64
  f6:	8b b9       	out	0x0b, r24	; 11
}
  f8:	9f 91       	pop	r25
  fa:	8f 91       	pop	r24
  fc:	2f 91       	pop	r18
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <uart_init>:
void uart_init()
{
	DDRD |= (1<<PD1) | (1<<PD2); //UART transmit pin
 108:	81 b3       	in	r24, 0x11	; 17
 10a:	86 60       	ori	r24, 0x06	; 6
 10c:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~(1<<PD0); //UART receive pin
 10e:	81 b3       	in	r24, 0x11	; 17
 110:	8e 7f       	andi	r24, 0xFE	; 254
 112:	81 bb       	out	0x11, r24	; 17
	UCSRA |= (1<<TXC); //simply clearing the transmission complete flag
 114:	8b b1       	in	r24, 0x0b	; 11
 116:	80 64       	ori	r24, 0x40	; 64
 118:	8b b9       	out	0x0b, r24	; 11
	UCSRB |= (1<<TXCIE) | (1<<TXEN) | (1<<RXEN);
 11a:	8a b1       	in	r24, 0x0a	; 10
 11c:	88 65       	ori	r24, 0x58	; 88
 11e:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
 120:	80 b5       	in	r24, 0x20	; 32
 122:	86 68       	ori	r24, 0x86	; 134
 124:	80 bd       	out	0x20, r24	; 32
	UBRRH &= ~(1<<URSEL);
 126:	80 b5       	in	r24, 0x20	; 32
 128:	8f 77       	andi	r24, 0x7F	; 127
 12a:	80 bd       	out	0x20, r24	; 32
	UBRRL = 0x33;
 12c:	83 e3       	ldi	r24, 0x33	; 51
 12e:	89 b9       	out	0x09, r24	; 9
	sei();
 130:	78 94       	sei
 132:	08 95       	ret

00000134 <uart_transmit>:
}

void uart_transmit(unsigned char data)
{
	while (!(UCSRA & (1<<UDRE)));
 134:	5d 9b       	sbis	0x0b, 5	; 11
 136:	fe cf       	rjmp	.-4      	; 0x134 <uart_transmit>
	UDR = data;
 138:	8c b9       	out	0x0c, r24	; 12
 13a:	8f e1       	ldi	r24, 0x1F	; 31
 13c:	9e e4       	ldi	r25, 0x4E	; 78
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <uart_transmit+0xa>
 142:	00 c0       	rjmp	.+0      	; 0x144 <uart_transmit+0x10>
 144:	00 00       	nop
 146:	08 95       	ret

00000148 <transmit_string>:
	_delay_ms(10);
}

void transmit_string(char * str)
{
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	ec 01       	movw	r28, r24
	while(*str != '\0')
 14e:	03 c0       	rjmp	.+6      	; 0x156 <transmit_string+0xe>
	{
		uart_transmit(*str);
 150:	0e 94 9a 00 	call	0x134	; 0x134 <uart_transmit>
		str++;
 154:	21 96       	adiw	r28, 0x01	; 1
	_delay_ms(10);
}

void transmit_string(char * str)
{
	while(*str != '\0')
 156:	88 81       	ld	r24, Y
 158:	81 11       	cpse	r24, r1
 15a:	fa cf       	rjmp	.-12     	; 0x150 <transmit_string+0x8>
	{
		uart_transmit(*str);
		str++;
	}
}
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <main>:

int main(void)
{
	uart_init();
 162:	0e 94 84 00 	call	0x108	; 0x108 <uart_init>
	while (1)
	{
		uart_transmit('H');
 166:	88 e4       	ldi	r24, 0x48	; 72
 168:	0e 94 9a 00 	call	0x134	; 0x134 <uart_transmit>
 16c:	2f ef       	ldi	r18, 0xFF	; 255
 16e:	89 e6       	ldi	r24, 0x69	; 105
 170:	98 e1       	ldi	r25, 0x18	; 24
 172:	21 50       	subi	r18, 0x01	; 1
 174:	80 40       	sbci	r24, 0x00	; 0
 176:	90 40       	sbci	r25, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <main+0x10>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <main+0x1a>
 17c:	00 00       	nop
		_delay_ms(1000);
		transmit_string(msg);
 17e:	80 e6       	ldi	r24, 0x60	; 96
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 a4 00 	call	0x148	; 0x148 <transmit_string>
 186:	ef cf       	rjmp	.-34     	; 0x166 <main+0x4>

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
