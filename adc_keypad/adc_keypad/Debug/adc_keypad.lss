
adc_keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  000002c6  0000035a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000a8  008000a8  000003a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000094d  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000068e  00000000  00000000  00000dad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f1  00000000  00000000  0000143b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  0000182c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000361  00000000  00000000  000018c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000125  00000000  00000000  00001c25  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001d4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ec       	ldi	r30, 0xC6	; 198
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3a       	cpi	r26, 0xA8	; 168
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 ea       	ldi	r26, 0xA8	; 168
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3a       	cpi	r26, 0xAA	; 170
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 51 01 	call	0x2a2	; 0x2a2 <main>
  8a:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <uart_init>:
#define s16 (value >= 313) && (value <=316)

int value = 0;
void uart_init()
{
	DDRD |= (1<<PD1); //set Tx pin
  92:	81 b3       	in	r24, 0x11	; 17
  94:	82 60       	ori	r24, 0x02	; 2
  96:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~(1<<PD0); //set Rx pin
  98:	81 b3       	in	r24, 0x11	; 17
  9a:	8e 7f       	andi	r24, 0xFE	; 254
  9c:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1<<PD0) & ~(1<<PD1);
  9e:	82 b3       	in	r24, 0x12	; 18
  a0:	8c 7f       	andi	r24, 0xFC	; 252
  a2:	82 bb       	out	0x12, r24	; 18
	UCSRA = 0x00;UCSRB = 0x18;UCSRC = 0x06;
  a4:	1b b8       	out	0x0b, r1	; 11
  a6:	88 e1       	ldi	r24, 0x18	; 24
  a8:	8a b9       	out	0x0a, r24	; 10
  aa:	86 e0       	ldi	r24, 0x06	; 6
  ac:	80 bd       	out	0x20, r24	; 32
	UBRRH = 0x00;UBRRL = 0x33;
  ae:	10 bc       	out	0x20, r1	; 32
  b0:	83 e3       	ldi	r24, 0x33	; 51
  b2:	89 b9       	out	0x09, r24	; 9
  b4:	08 95       	ret

000000b6 <transmit>:
}

void transmit(char data)
{
	UDR = data;
  b6:	8c b9       	out	0x0c, r24	; 12
	while((UCSRA & (1<<TXC)) == 0)
  b8:	5e 9b       	sbis	0x0b, 6	; 11
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <transmit+0x2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	2f e7       	ldi	r18, 0x7F	; 127
  be:	88 e3       	ldi	r24, 0x38	; 56
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <transmit+0xc>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <transmit+0x16>
  cc:	00 00       	nop
  ce:	08 95       	ret

000000d0 <adc0_init>:
	}
	_delay_ms(50);
}
void adc0_init()
{
	DDRA = 0x00;
  d0:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0x00;
  d2:	1b ba       	out	0x1b, r1	; 27
	ADMUX = 0x60;
  d4:	80 e6       	ldi	r24, 0x60	; 96
  d6:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0x87;
  d8:	87 e8       	ldi	r24, 0x87	; 135
  da:	86 b9       	out	0x06, r24	; 6
  dc:	08 95       	ret

000000de <read_adc0>:
}

int read_adc0()
{
	ADCSRA |= (1<<ADSC); //starting the conversion
  de:	86 b1       	in	r24, 0x06	; 6
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	86 b9       	out	0x06, r24	; 6
	int data = (ADCL >> 6) | (ADCH << 2);
  e4:	24 b1       	in	r18, 0x04	; 4
  e6:	22 95       	swap	r18
  e8:	26 95       	lsr	r18
  ea:	26 95       	lsr	r18
  ec:	23 70       	andi	r18, 0x03	; 3
  ee:	85 b1       	in	r24, 0x05	; 5
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
	return data;
}
  fa:	82 2b       	or	r24, r18
  fc:	08 95       	ret

000000fe <serial_println>:
void serial_println(char* str)
{
  fe:	0f 93       	push	r16
 100:	1f 93       	push	r17
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	8c 01       	movw	r16, r24
	short int n = 0;
 108:	c0 e0       	ldi	r28, 0x00	; 0
 10a:	d0 e0       	ldi	r29, 0x00	; 0
	while(str[n] != '\0')
 10c:	03 c0       	rjmp	.+6      	; 0x114 <serial_println+0x16>
	{
		transmit(str[n]);
 10e:	0e 94 5b 00 	call	0xb6	; 0xb6 <transmit>
		n++;
 112:	21 96       	adiw	r28, 0x01	; 1
	return data;
}
void serial_println(char* str)
{
	short int n = 0;
	while(str[n] != '\0')
 114:	f8 01       	movw	r30, r16
 116:	ec 0f       	add	r30, r28
 118:	fd 1f       	adc	r31, r29
 11a:	80 81       	ld	r24, Z
 11c:	81 11       	cpse	r24, r1
 11e:	f7 cf       	rjmp	.-18     	; 0x10e <serial_println+0x10>
	{
		transmit(str[n]);
		n++;
	}
	transmit('\n');
 120:	8a e0       	ldi	r24, 0x0A	; 10
 122:	0e 94 5b 00 	call	0xb6	; 0xb6 <transmit>
	transmit('\r');
 126:	8d e0       	ldi	r24, 0x0D	; 13
 128:	0e 94 5b 00 	call	0xb6	; 0xb6 <transmit>
	
}
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	1f 91       	pop	r17
 132:	0f 91       	pop	r16
 134:	08 95       	ret

00000136 <keyPad>:

void keyPad()
{
	value = read_adc0();
 136:	0e 94 6f 00 	call	0xde	; 0xde <read_adc0>
 13a:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__data_end+0x1>
 13e:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__data_end>
	if(s1)
 142:	9c 01       	movw	r18, r24
 144:	2c 53       	subi	r18, 0x3C	; 60
 146:	31 09       	sbc	r19, r1
 148:	23 30       	cpi	r18, 0x03	; 3
 14a:	31 05       	cpc	r19, r1
 14c:	28 f4       	brcc	.+10     	; 0x158 <keyPad+0x22>
		serial_println("0\r\n");
 14e:	80 e6       	ldi	r24, 0x60	; 96
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 7f 00 	call	0xfe	; 0xfe <serial_println>
 156:	08 95       	ret
	else if(s2)
 158:	9c 01       	movw	r18, r24
 15a:	27 55       	subi	r18, 0x57	; 87
 15c:	31 09       	sbc	r19, r1
 15e:	22 30       	cpi	r18, 0x02	; 2
 160:	31 05       	cpc	r19, r1
 162:	28 f4       	brcc	.+10     	; 0x16e <keyPad+0x38>
		serial_println("1\r\n");
 164:	84 e6       	ldi	r24, 0x64	; 100
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 7f 00 	call	0xfe	; 0xfe <serial_println>
 16c:	08 95       	ret
	else if(s3)
 16e:	9c 01       	movw	r18, r24
 170:	23 59       	subi	r18, 0x93	; 147
 172:	31 09       	sbc	r19, r1
 174:	23 30       	cpi	r18, 0x03	; 3
 176:	31 05       	cpc	r19, r1
 178:	28 f4       	brcc	.+10     	; 0x184 <keyPad+0x4e>
		serial_println("2\r\n");
 17a:	88 e6       	ldi	r24, 0x68	; 104
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 7f 00 	call	0xfe	; 0xfe <serial_println>
 182:	08 95       	ret
	else if(s4)
 184:	9c 01       	movw	r18, r24
 186:	29 5e       	subi	r18, 0xE9	; 233
 188:	31 40       	sbci	r19, 0x01	; 1
 18a:	27 30       	cpi	r18, 0x07	; 7
 18c:	31 05       	cpc	r19, r1
 18e:	28 f4       	brcc	.+10     	; 0x19a <keyPad+0x64>
		serial_println("3\r\n");
 190:	8c e6       	ldi	r24, 0x6C	; 108
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 7f 00 	call	0xfe	; 0xfe <serial_println>
 198:	08 95       	ret
	else if(s5)
 19a:	9c 01       	movw	r18, r24
 19c:	21 54       	subi	r18, 0x41	; 65
 19e:	31 09       	sbc	r19, r1
 1a0:	23 30       	cpi	r18, 0x03	; 3
 1a2:	31 05       	cpc	r19, r1
 1a4:	28 f4       	brcc	.+10     	; 0x1b0 <keyPad+0x7a>
		serial_println("4\r\n");
 1a6:	80 e7       	ldi	r24, 0x70	; 112
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 7f 00 	call	0xfe	; 0xfe <serial_println>
 1ae:	08 95       	ret
	else if(s6)
 1b0:	9c 01       	movw	r18, r24
 1b2:	2f 55       	subi	r18, 0x5F	; 95
 1b4:	31 09       	sbc	r19, r1
 1b6:	23 30       	cpi	r18, 0x03	; 3
 1b8:	31 05       	cpc	r19, r1
 1ba:	28 f4       	brcc	.+10     	; 0x1c6 <keyPad+0x90>
		serial_println("5\r\n");
 1bc:	84 e7       	ldi	r24, 0x74	; 116
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 7f 00 	call	0xfe	; 0xfe <serial_println>
 1c4:	08 95       	ret
	else if(s7)
 1c6:	9c 01       	movw	r18, r24
 1c8:	22 5b       	subi	r18, 0xB2	; 178
 1ca:	31 09       	sbc	r19, r1
 1cc:	23 30       	cpi	r18, 0x03	; 3
 1ce:	31 05       	cpc	r19, r1
 1d0:	28 f4       	brcc	.+10     	; 0x1dc <keyPad+0xa6>
		serial_println("6\r\n");
 1d2:	88 e7       	ldi	r24, 0x78	; 120
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 7f 00 	call	0xfe	; 0xfe <serial_println>
 1da:	08 95       	ret
	else if(s8)
 1dc:	9c 01       	movw	r18, r24
 1de:	27 5f       	subi	r18, 0xF7	; 247
 1e0:	33 40       	sbci	r19, 0x03	; 3
 1e2:	23 30       	cpi	r18, 0x03	; 3
 1e4:	31 05       	cpc	r19, r1
 1e6:	28 f4       	brcc	.+10     	; 0x1f2 <keyPad+0xbc>
		serial_println("7\r\n");
 1e8:	8c e7       	ldi	r24, 0x7C	; 124
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 7f 00 	call	0xfe	; 0xfe <serial_println>
 1f0:	08 95       	ret
	else if(s9)
 1f2:	9c 01       	movw	r18, r24
 1f4:	28 53       	subi	r18, 0x38	; 56
 1f6:	31 09       	sbc	r19, r1
 1f8:	24 30       	cpi	r18, 0x04	; 4
 1fa:	31 05       	cpc	r19, r1
 1fc:	28 f4       	brcc	.+10     	; 0x208 <keyPad+0xd2>
		serial_println("8\r\n");
 1fe:	80 e8       	ldi	r24, 0x80	; 128
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 7f 00 	call	0xfe	; 0xfe <serial_println>
 206:	08 95       	ret
	else if(s10)
 208:	ac 01       	movw	r20, r24
 20a:	4f 54       	subi	r20, 0x4F	; 79
 20c:	51 09       	sbc	r21, r1
 20e:	45 30       	cpi	r20, 0x05	; 5
 210:	51 05       	cpc	r21, r1
 212:	28 f4       	brcc	.+10     	; 0x21e <keyPad+0xe8>
		serial_println("9\r\n");
 214:	84 e8       	ldi	r24, 0x84	; 132
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 7f 00 	call	0xfe	; 0xfe <serial_println>
 21c:	08 95       	ret
	else if(s11)
 21e:	ac 01       	movw	r20, r24
 220:	41 58       	subi	r20, 0x81	; 129
 222:	51 09       	sbc	r21, r1
 224:	44 30       	cpi	r20, 0x04	; 4
 226:	51 05       	cpc	r21, r1
 228:	28 f4       	brcc	.+10     	; 0x234 <keyPad+0xfe>
		serial_println("A\r\n");
 22a:	88 e8       	ldi	r24, 0x88	; 136
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 7f 00 	call	0xfe	; 0xfe <serial_println>
 232:	08 95       	ret
	else if(s12)
 234:	ac 01       	movw	r20, r24
 236:	40 55       	subi	r20, 0x50	; 80
 238:	51 40       	sbci	r21, 0x01	; 1
 23a:	45 30       	cpi	r20, 0x05	; 5
 23c:	51 05       	cpc	r21, r1
 23e:	28 f4       	brcc	.+10     	; 0x24a <keyPad+0x114>
		serial_println("B\r\n");
 240:	8c e8       	ldi	r24, 0x8C	; 140
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 7f 00 	call	0xfe	; 0xfe <serial_println>
 248:	08 95       	ret
	else if(s13)
 24a:	24 30       	cpi	r18, 0x04	; 4
 24c:	31 05       	cpc	r19, r1
 24e:	28 f4       	brcc	.+10     	; 0x25a <keyPad+0x124>
		serial_println("C\r\n");
 250:	80 e9       	ldi	r24, 0x90	; 144
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 7f 00 	call	0xfe	; 0xfe <serial_println>
 258:	08 95       	ret
	else if(s14)
 25a:	9c 01       	movw	r18, r24
 25c:	2e 54       	subi	r18, 0x4E	; 78
 25e:	31 09       	sbc	r19, r1
 260:	23 30       	cpi	r18, 0x03	; 3
 262:	31 05       	cpc	r19, r1
 264:	28 f4       	brcc	.+10     	; 0x270 <keyPad+0x13a>
		serial_println("D\r\n");
 266:	84 e9       	ldi	r24, 0x94	; 148
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 7f 00 	call	0xfe	; 0xfe <serial_println>
 26e:	08 95       	ret
	else if(s15)
 270:	9c 01       	movw	r18, r24
 272:	27 57       	subi	r18, 0x77	; 119
 274:	31 09       	sbc	r19, r1
 276:	25 30       	cpi	r18, 0x05	; 5
 278:	31 05       	cpc	r19, r1
 27a:	28 f4       	brcc	.+10     	; 0x286 <keyPad+0x150>
		serial_println("E\r\n");
 27c:	88 e9       	ldi	r24, 0x98	; 152
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 7f 00 	call	0xfe	; 0xfe <serial_println>
 284:	08 95       	ret
	else if(s16)
 286:	89 53       	subi	r24, 0x39	; 57
 288:	91 40       	sbci	r25, 0x01	; 1
 28a:	04 97       	sbiw	r24, 0x04	; 4
 28c:	28 f4       	brcc	.+10     	; 0x298 <keyPad+0x162>
		serial_println("F\r\n");
 28e:	8c e9       	ldi	r24, 0x9C	; 156
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 7f 00 	call	0xfe	; 0xfe <serial_println>
 296:	08 95       	ret
	else
		serial_println("None\r\n");
 298:	80 ea       	ldi	r24, 0xA0	; 160
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 7f 00 	call	0xfe	; 0xfe <serial_println>
 2a0:	08 95       	ret

000002a2 <main>:
}
int main(void)
{
	uart_init();
 2a2:	0e 94 49 00 	call	0x92	; 0x92 <uart_init>
	adc0_init();
 2a6:	0e 94 68 00 	call	0xd0	; 0xd0 <adc0_init>
	
	while (1)
	{
		keyPad();
 2aa:	0e 94 9b 00 	call	0x136	; 0x136 <keyPad>
 2ae:	2f ef       	ldi	r18, 0xFF	; 255
 2b0:	89 e6       	ldi	r24, 0x69	; 105
 2b2:	98 e1       	ldi	r25, 0x18	; 24
 2b4:	21 50       	subi	r18, 0x01	; 1
 2b6:	80 40       	sbci	r24, 0x00	; 0
 2b8:	90 40       	sbci	r25, 0x00	; 0
 2ba:	e1 f7       	brne	.-8      	; 0x2b4 <main+0x12>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <main+0x1c>
 2be:	00 00       	nop
 2c0:	f4 cf       	rjmp	.-24     	; 0x2aa <main+0x8>

000002c2 <_exit>:
 2c2:	f8 94       	cli

000002c4 <__stop_program>:
 2c4:	ff cf       	rjmp	.-2      	; 0x2c4 <__stop_program>
