
timer1_ctc_interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005a5  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000511  00000000  00000000  00000781  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000020d  00000000  00000000  00000c92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000006c  00000000  00000000  00000ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f9  00000000  00000000  00000f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000092  00000000  00000000  00001205  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001297  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_8>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_7>:
#define F_CPU 8000000UL
#include <avr/io.h>
#include <avr/interrupt.h>

ISR (TIMER1_COMPA_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
  78:	9f 93       	push	r25
	PORTD ^= 0x01;
  7a:	92 b3       	in	r25, 0x12	; 18
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	89 27       	eor	r24, r25
  80:	82 bb       	out	0x12, r24	; 18
	TIFR |= (1<<OCIE1A);
  82:	88 b7       	in	r24, 0x38	; 56
  84:	80 61       	ori	r24, 0x10	; 16
  86:	88 bf       	out	0x38, r24	; 56
}
  88:	9f 91       	pop	r25
  8a:	8f 91       	pop	r24
  8c:	0f 90       	pop	r0
  8e:	0f be       	out	0x3f, r0	; 63
  90:	0f 90       	pop	r0
  92:	1f 90       	pop	r1
  94:	18 95       	reti

00000096 <__vector_8>:

ISR (TIMER1_COMPB_vect)
{
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
	PORTD ^= 0x02;
  a4:	92 b3       	in	r25, 0x12	; 18
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	89 27       	eor	r24, r25
  aa:	82 bb       	out	0x12, r24	; 18
	TIFR |= (1<<OCIE1B);
  ac:	88 b7       	in	r24, 0x38	; 56
  ae:	88 60       	ori	r24, 0x08	; 8
  b0:	88 bf       	out	0x38, r24	; 56
}
  b2:	9f 91       	pop	r25
  b4:	8f 91       	pop	r24
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <main>:
int main(void)
{
	sei();
  c0:	78 94       	sei
	DDRD |= 0x02;
  c2:	81 b3       	in	r24, 0x11	; 17
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	81 bb       	out	0x11, r24	; 17
    TCCR1A = 0x50; TCCR1B = 0x0A;
  c8:	80 e5       	ldi	r24, 0x50	; 80
  ca:	8f bd       	out	0x2f, r24	; 47
  cc:	8a e0       	ldi	r24, 0x0A	; 10
  ce:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 50000; OCR1B = 30000;
  d0:	80 e5       	ldi	r24, 0x50	; 80
  d2:	93 ec       	ldi	r25, 0xC3	; 195
  d4:	9b bd       	out	0x2b, r25	; 43
  d6:	8a bd       	out	0x2a, r24	; 42
  d8:	80 e3       	ldi	r24, 0x30	; 48
  da:	95 e7       	ldi	r25, 0x75	; 117
  dc:	99 bd       	out	0x29, r25	; 41
  de:	88 bd       	out	0x28, r24	; 40
	TIMSK |= (1<<OCIE1A) | (1<<OCIE1B);
  e0:	89 b7       	in	r24, 0x39	; 57
  e2:	88 61       	ori	r24, 0x18	; 24
  e4:	89 bf       	out	0x39, r24	; 57
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <main+0x26>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>
