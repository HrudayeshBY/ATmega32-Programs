
SPI_master_led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000116  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000651  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b4  00000000  00000000  00000805  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000298  00000000  00000000  00000db9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001054  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000339  00000000  00000000  00001098  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001f  00000000  00000000  000013d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000013f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_init>:
#define CS_ON PORTB &= ~(1<<PB4)
#define CS_OFF PORTB |= (1<<PB4)

void SPI_init()
{
	DDRB |= (1<<PB4) | (1<<PB5) | (1<<PB7); //SCK, MOSI, SS
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	80 6b       	ori	r24, 0xB0	; 176
  70:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<PB6);// MISO
  72:	87 b3       	in	r24, 0x17	; 23
  74:	8f 7b       	andi	r24, 0xBF	; 191
  76:	87 bb       	out	0x17, r24	; 23
	SPCR |= (1<<SPE) | (1<<MSTR); // Enabled as master and SPI enabled
  78:	8d b1       	in	r24, 0x0d	; 13
  7a:	80 65       	ori	r24, 0x50	; 80
  7c:	8d b9       	out	0x0d, r24	; 13
  7e:	08 95       	ret

00000080 <SPI_master_tx>:
}

void SPI_master_tx(uint8_t data)
{
	uint8_t dummy;
	SPDR = data;
  80:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)))
  82:	77 9b       	sbis	0x0e, 7	; 14
  84:	fe cf       	rjmp	.-4      	; 0x82 <SPI_master_tx+0x2>
	{
		//wait for serial transfer
	}
	dummy = SPSR;
  86:	8e b1       	in	r24, 0x0e	; 14
	dummy = SPDR; // to clear the SPIF flag
  88:	8f b1       	in	r24, 0x0f	; 15
  8a:	08 95       	ret

0000008c <main>:
}
int main(void)
{
	DDRC &= ~(0xFF);
  8c:	84 b3       	in	r24, 0x14	; 20
  8e:	14 ba       	out	0x14, r1	; 20
	PORTC = 0xFF; // pull up resistor enabled
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	85 bb       	out	0x15, r24	; 21
	SPI_init();
  94:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_init>
	while (1)
	{
		CS_ON;
  98:	88 b3       	in	r24, 0x18	; 24
  9a:	8f 7e       	andi	r24, 0xEF	; 239
  9c:	88 bb       	out	0x18, r24	; 24
		SPI_master_tx(PINC);
  9e:	83 b3       	in	r24, 0x13	; 19
  a0:	0e 94 40 00 	call	0x80	; 0x80 <SPI_master_tx>
		CS_OFF;
  a4:	88 b3       	in	r24, 0x18	; 24
  a6:	80 61       	ori	r24, 0x10	; 16
  a8:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	89 e6       	ldi	r24, 0x69	; 105
  ae:	98 e1       	ldi	r25, 0x18	; 24
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x24>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x2e>
  ba:	00 00       	nop
  bc:	ed cf       	rjmp	.-38     	; 0x98 <main+0xc>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
