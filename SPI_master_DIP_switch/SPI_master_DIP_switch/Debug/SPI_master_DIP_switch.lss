
SPI_master_DIP_switch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000664  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c3  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b0  00000000  00000000  00000de3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001094  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034d  00000000  00000000  000010d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000046  00000000  00000000  00001425  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000146b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 48 00 	call	0x90	; 0x90 <main>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_init>:
#define CS_ON PORTB &= ~(1<<PB4)
#define CS_OFF PORTB |= (1<<PB4)

void SPI_init()
{
	DDRB |= (1<<PB7) | (1<<PB5) | (1<<PB4);
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	80 6b       	ori	r24, 0xB0	; 176
  70:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<PB6);
  72:	87 b3       	in	r24, 0x17	; 23
  74:	8f 7b       	andi	r24, 0xBF	; 191
  76:	87 bb       	out	0x17, r24	; 23
	SPCR |= (1<<SPE) | (1<<MSTR); // SPI as master
  78:	8d b1       	in	r24, 0x0d	; 13
  7a:	80 65       	ori	r24, 0x50	; 80
  7c:	8d b9       	out	0x0d, r24	; 13
	SPSR &= ~(1<<SPI2X); //F osc by 4 
  7e:	8e b1       	in	r24, 0x0e	; 14
  80:	8e 7f       	andi	r24, 0xFE	; 254
  82:	8e b9       	out	0x0e, r24	; 14
  84:	08 95       	ret

00000086 <SPI_master_tx>:
}
void SPI_master_tx(uint8_t data)
{
	uint8_t dummy = 0X00;
	SPDR = data;
  86:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)))
  88:	77 9b       	sbis	0x0e, 7	; 14
  8a:	fe cf       	rjmp	.-4      	; 0x88 <SPI_master_tx+0x2>
	{
		//wait
	}
	dummy = SPDR; // to clear the SPIF flag we need to read the SPSR register and SPDR register
  8c:	8f b1       	in	r24, 0x0f	; 15
  8e:	08 95       	ret

00000090 <main>:
}
int main(void)
{
	DDRD = 0X00; //PORTD as input
  90:	11 ba       	out	0x11, r1	; 17
	CS_OFF;
  92:	88 b3       	in	r24, 0x18	; 24
  94:	80 61       	ori	r24, 0x10	; 16
  96:	88 bb       	out	0x18, r24	; 24
	PORTD = 0XFF; //internal pull up resistor enabled
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	82 bb       	out	0x12, r24	; 18
	
	SPI_init();
  9c:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_init>
	//SPI_master_tx();
	uint8_t value = PIND;
  a0:	80 b3       	in	r24, 0x10	; 16
    while (1) 
    {
		value = PIND;
  a2:	80 b3       	in	r24, 0x10	; 16
		CS_ON;
  a4:	98 b3       	in	r25, 0x18	; 24
  a6:	9f 7e       	andi	r25, 0xEF	; 239
  a8:	98 bb       	out	0x18, r25	; 24
		SPI_master_tx(value);
  aa:	0e 94 43 00 	call	0x86	; 0x86 <SPI_master_tx>
		CS_OFF;
  ae:	88 b3       	in	r24, 0x18	; 24
  b0:	80 61       	ori	r24, 0x10	; 16
  b2:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	83 ed       	ldi	r24, 0xD3	; 211
  b8:	90 e3       	ldi	r25, 0x30	; 48
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x2a>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x34>
  c4:	00 00       	nop
  c6:	ed cf       	rjmp	.-38     	; 0xa2 <main+0x12>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
