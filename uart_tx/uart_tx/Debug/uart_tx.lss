
uart_tx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000100  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000100  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068d  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e7  00000000  00000000  000008ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027b  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001110  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000329  00000000  00000000  00001154  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000db  00000000  00000000  0000147d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001558  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e0       	ldi	r30, 0x00	; 0
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 57 00 	call	0xae	; 0xae <main>
  7a:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <transmit>:
#define F_CPU 8000000UL
#include <avr/io.h>
#include <util/delay.h>

void transmit(char* data)
{
  82:	ac 01       	movw	r20, r24
	int n = 0;
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	30 e0       	ldi	r19, 0x00	; 0
	while(data[n] != '\0')
  88:	0b c0       	rjmp	.+22     	; 0xa0 <transmit+0x1e>
	{
		UDR = data[n];
  8a:	9c b9       	out	0x0c, r25	; 12
		while((UCSRA & 0x40) == 0)
  8c:	5e 9b       	sbis	0x0b, 6	; 11
  8e:	fe cf       	rjmp	.-4      	; 0x8c <transmit+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	8f e1       	ldi	r24, 0x1F	; 31
  92:	9e e4       	ldi	r25, 0x4E	; 78
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <transmit+0x12>
  98:	00 c0       	rjmp	.+0      	; 0x9a <transmit+0x18>
  9a:	00 00       	nop
		{
			//do nothing
		}
		_delay_ms(10);
		n++;
  9c:	2f 5f       	subi	r18, 0xFF	; 255
  9e:	3f 4f       	sbci	r19, 0xFF	; 255
#include <util/delay.h>

void transmit(char* data)
{
	int n = 0;
	while(data[n] != '\0')
  a0:	fa 01       	movw	r30, r20
  a2:	e2 0f       	add	r30, r18
  a4:	f3 1f       	adc	r31, r19
  a6:	90 81       	ld	r25, Z
  a8:	91 11       	cpse	r25, r1
  aa:	ef cf       	rjmp	.-34     	; 0x8a <transmit+0x8>
		}
		_delay_ms(10);
		n++;
	}
	
}
  ac:	08 95       	ret

000000ae <main>:
int main(void)
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
  b6:	66 97       	sbiw	r28, 0x16	; 22
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	f8 94       	cli
  bc:	de bf       	out	0x3e, r29	; 62
  be:	0f be       	out	0x3f, r0	; 63
  c0:	cd bf       	out	0x3d, r28	; 61
    //USART pins are RXD and TXD on port D
	DDRD = 0x02;PORTD = 0x00;
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	81 bb       	out	0x11, r24	; 17
  c6:	12 ba       	out	0x12, r1	; 18
	UCSRA = 0x00;UCSRB = 0x18;UCSRC = 0x06;
  c8:	1b b8       	out	0x0b, r1	; 11
  ca:	88 e1       	ldi	r24, 0x18	; 24
  cc:	8a b9       	out	0x0a, r24	; 10
  ce:	86 e0       	ldi	r24, 0x06	; 6
  d0:	80 bd       	out	0x20, r24	; 32
	//setting baud rate as 9600
	UBRRH = 0x00;UBRRL = 0x33;
  d2:	10 bc       	out	0x20, r1	; 32
  d4:	83 e3       	ldi	r24, 0x33	; 51
  d6:	89 b9       	out	0x09, r24	; 9
	
	char messaage[] = "Hi PC, I am ATmega32 ";
  d8:	86 e1       	ldi	r24, 0x16	; 22
  da:	e2 e6       	ldi	r30, 0x62	; 98
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	de 01       	movw	r26, r28
  e0:	11 96       	adiw	r26, 0x01	; 1
  e2:	01 90       	ld	r0, Z+
  e4:	0d 92       	st	X+, r0
  e6:	8a 95       	dec	r24
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x34>
	transmit(messaage);
  ea:	ce 01       	movw	r24, r28
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	0e 94 41 00 	call	0x82	; 0x82 <transmit>
	transmit("h");
  f2:	80 e6       	ldi	r24, 0x60	; 96
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 41 00 	call	0x82	; 0x82 <transmit>
  fa:	ff cf       	rjmp	.-2      	; 0xfa <main+0x4c>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
