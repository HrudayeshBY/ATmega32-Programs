
lcd_i2c_new.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000204  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ae2  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000063d  00000000  00000000  00000dfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000403  00000000  00000000  0000143b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00001840  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000378  00000000  00000000  000018f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000507  00000000  00000000  00001c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002173  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 e6 00 	call	0x1cc	; 0x1cc <main>
  64:	0c 94 00 01 	jmp	0x200	; 0x200 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <i2c_master_init>:
#define RW 1
#define RS 0

void i2c_master_init()
{
	TWSR &= ~((1<<TWPS1) | (1<<TWPS0)); // Clear prescaler bits
  6c:	81 b1       	in	r24, 0x01	; 1
  6e:	8c 7f       	andi	r24, 0xFC	; 252
  70:	81 b9       	out	0x01, r24	; 1
	TWBR = 0x08; // SCL = ~111kHz
  72:	88 e0       	ldi	r24, 0x08	; 8
  74:	80 b9       	out	0x00, r24	; 0
	TWCR |= (1<<TWEN); // Enable TWI
  76:	86 b7       	in	r24, 0x36	; 54
  78:	84 60       	ori	r24, 0x04	; 4
  7a:	86 bf       	out	0x36, r24	; 54
  7c:	08 95       	ret

0000007e <i2c_start>:
}

void i2c_start()
{
	TWCR |= (1<<TWINT) | (1<<TWEN) | (1<<TWSTA);
  7e:	86 b7       	in	r24, 0x36	; 54
  80:	84 6a       	ori	r24, 0xA4	; 164
  82:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
  84:	06 b6       	in	r0, 0x36	; 54
  86:	07 fe       	sbrs	r0, 7
  88:	fd cf       	rjmp	.-6      	; 0x84 <i2c_start+0x6>
}
  8a:	08 95       	ret

0000008c <i2c_stop>:

void i2c_stop()
{
	TWCR |= (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
  8c:	86 b7       	in	r24, 0x36	; 54
  8e:	84 69       	ori	r24, 0x94	; 148
  90:	86 bf       	out	0x36, r24	; 54
  92:	08 95       	ret

00000094 <i2c_write>:
}

void i2c_write(char data)
{
	TWDR = data;
  94:	83 b9       	out	0x03, r24	; 3
	TWCR |= (1<<TWINT) | (1<<TWEN);
  96:	86 b7       	in	r24, 0x36	; 54
  98:	84 68       	ori	r24, 0x84	; 132
  9a:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
  9c:	06 b6       	in	r0, 0x36	; 54
  9e:	07 fe       	sbrs	r0, 7
  a0:	fd cf       	rjmp	.-6      	; 0x9c <i2c_write+0x8>
}
  a2:	08 95       	ret

000000a4 <i2c_lcd_data>:

void i2c_lcd_data(char data)
{
  a4:	1f 93       	push	r17
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	c8 2f       	mov	r28, r24
	char temp = (data & 0xF0);
  ac:	d8 2f       	mov	r29, r24
  ae:	d0 7f       	andi	r29, 0xF0	; 240
	temp |= (1<<BLK) | (1<<EN) | (1<<RS);
  b0:	1d 2f       	mov	r17, r29
  b2:	1d 60       	ori	r17, 0x0D	; 13
	i2c_start();
  b4:	0e 94 3f 00 	call	0x7e	; 0x7e <i2c_start>
	i2c_write(PCF857A_addr);
  b8:	8e e4       	ldi	r24, 0x4E	; 78
  ba:	0e 94 4a 00 	call	0x94	; 0x94 <i2c_write>
	i2c_write(temp);
  be:	81 2f       	mov	r24, r17
  c0:	0e 94 4a 00 	call	0x94	; 0x94 <i2c_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	87 ec       	ldi	r24, 0xC7	; 199
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <i2c_lcd_data+0x24>
  cc:	00 c0       	rjmp	.+0      	; 0xce <i2c_lcd_data+0x2a>
  ce:	00 00       	nop
	_delay_us(100);
	temp &= ~(1<<EN);
	i2c_write(temp);
  d0:	8d 2f       	mov	r24, r29
  d2:	89 60       	ori	r24, 0x09	; 9
  d4:	0e 94 4a 00 	call	0x94	; 0x94 <i2c_write>
  d8:	87 ec       	ldi	r24, 0xC7	; 199
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <i2c_lcd_data+0x38>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <i2c_lcd_data+0x3e>
  e2:	00 00       	nop
	_delay_us(100);

	temp = ((data <<4) & 0xF0);
  e4:	90 e1       	ldi	r25, 0x10	; 16
  e6:	c9 9f       	mul	r28, r25
  e8:	e0 01       	movw	r28, r0
  ea:	11 24       	eor	r1, r1
	temp |= (1<<BLK) | (1<<EN) | (1<<RS);
	i2c_write(temp);
  ec:	8c 2f       	mov	r24, r28
  ee:	8d 60       	ori	r24, 0x0D	; 13
  f0:	0e 94 4a 00 	call	0x94	; 0x94 <i2c_write>
  f4:	87 ec       	ldi	r24, 0xC7	; 199
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <i2c_lcd_data+0x54>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <i2c_lcd_data+0x5a>
  fe:	00 00       	nop
 100:	8c 2f       	mov	r24, r28
 102:	8b 7f       	andi	r24, 0xFB	; 251
	_delay_us(100);
	temp &= ~(1<<EN);
	i2c_write(temp);
 104:	89 60       	ori	r24, 0x09	; 9
 106:	0e 94 4a 00 	call	0x94	; 0x94 <i2c_write>
 10a:	87 ec       	ldi	r24, 0xC7	; 199
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <i2c_lcd_data+0x6a>
 112:	00 c0       	rjmp	.+0      	; 0x114 <i2c_lcd_data+0x70>
 114:	00 00       	nop
	_delay_us(100);
	i2c_stop();
 116:	0e 94 46 00 	call	0x8c	; 0x8c <i2c_stop>
}
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	1f 91       	pop	r17
 120:	08 95       	ret

00000122 <i2c_lcd_cmd>:

void i2c_lcd_cmd(char cmd)
{
 122:	1f 93       	push	r17
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	c8 2f       	mov	r28, r24
	char temp = (cmd & 0xF0);
 12a:	d8 2f       	mov	r29, r24
 12c:	d0 7f       	andi	r29, 0xF0	; 240
	temp |= (1<<BLK) | (1<<EN);
 12e:	1d 2f       	mov	r17, r29
 130:	1c 60       	ori	r17, 0x0C	; 12
	i2c_start();
 132:	0e 94 3f 00 	call	0x7e	; 0x7e <i2c_start>
	i2c_write(PCF857A_addr);
 136:	8e e4       	ldi	r24, 0x4E	; 78
 138:	0e 94 4a 00 	call	0x94	; 0x94 <i2c_write>
	i2c_write(temp);
 13c:	81 2f       	mov	r24, r17
 13e:	0e 94 4a 00 	call	0x94	; 0x94 <i2c_write>
 142:	87 ec       	ldi	r24, 0xC7	; 199
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <i2c_lcd_cmd+0x24>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <i2c_lcd_cmd+0x2a>
 14c:	00 00       	nop
	_delay_us(100);
	temp &= ~(1<<EN);
	i2c_write(temp);
 14e:	8d 2f       	mov	r24, r29
 150:	88 60       	ori	r24, 0x08	; 8
 152:	0e 94 4a 00 	call	0x94	; 0x94 <i2c_write>
 156:	87 ec       	ldi	r24, 0xC7	; 199
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <i2c_lcd_cmd+0x38>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <i2c_lcd_cmd+0x3e>
 160:	00 00       	nop
	_delay_us(100);

	temp = ((cmd <<4) & 0xF0);
 162:	90 e1       	ldi	r25, 0x10	; 16
 164:	c9 9f       	mul	r28, r25
 166:	e0 01       	movw	r28, r0
 168:	11 24       	eor	r1, r1
	temp |= (1<<BLK) | (1<<EN);
	i2c_write(temp);
 16a:	8c 2f       	mov	r24, r28
 16c:	8c 60       	ori	r24, 0x0C	; 12
 16e:	0e 94 4a 00 	call	0x94	; 0x94 <i2c_write>
 172:	87 ec       	ldi	r24, 0xC7	; 199
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <i2c_lcd_cmd+0x54>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <i2c_lcd_cmd+0x5a>
 17c:	00 00       	nop
 17e:	8c 2f       	mov	r24, r28
 180:	8b 7f       	andi	r24, 0xFB	; 251
	_delay_us(100);
	temp &= ~(1<<EN);
	i2c_write(temp);
 182:	88 60       	ori	r24, 0x08	; 8
 184:	0e 94 4a 00 	call	0x94	; 0x94 <i2c_write>
 188:	87 ec       	ldi	r24, 0xC7	; 199
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <i2c_lcd_cmd+0x6a>
 190:	00 c0       	rjmp	.+0      	; 0x192 <i2c_lcd_cmd+0x70>
 192:	00 00       	nop
	_delay_us(100);
	i2c_stop();
 194:	0e 94 46 00 	call	0x8c	; 0x8c <i2c_stop>
}
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	1f 91       	pop	r17
 19e:	08 95       	ret

000001a0 <i2c_lcd_init>:

void i2c_lcd_init()
{
	i2c_lcd_cmd(0x02); // 4-bit mode
 1a0:	82 e0       	ldi	r24, 0x02	; 2
 1a2:	0e 94 91 00 	call	0x122	; 0x122 <i2c_lcd_cmd>
	i2c_lcd_cmd(0x28); // 2-line, 5x7 font
 1a6:	88 e2       	ldi	r24, 0x28	; 40
 1a8:	0e 94 91 00 	call	0x122	; 0x122 <i2c_lcd_cmd>
	i2c_lcd_cmd(0x0E); // Display ON, Cursor ON
 1ac:	8e e0       	ldi	r24, 0x0E	; 14
 1ae:	0e 94 91 00 	call	0x122	; 0x122 <i2c_lcd_cmd>
	i2c_lcd_cmd(0x01); // Clear screen
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	0e 94 91 00 	call	0x122	; 0x122 <i2c_lcd_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b8:	8f e9       	ldi	r24, 0x9F	; 159
 1ba:	9f e0       	ldi	r25, 0x0F	; 15
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <i2c_lcd_init+0x1c>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <i2c_lcd_init+0x22>
 1c2:	00 00       	nop
	_delay_ms(2);      // Wait after clear
	i2c_lcd_cmd(0x80); // Set DDRAM to 0x00
 1c4:	80 e8       	ldi	r24, 0x80	; 128
 1c6:	0e 94 91 00 	call	0x122	; 0x122 <i2c_lcd_cmd>
 1ca:	08 95       	ret

000001cc <main>:
}

int main(void)
{
	i2c_master_init();
 1cc:	0e 94 36 00 	call	0x6c	; 0x6c <i2c_master_init>
 1d0:	2f e7       	ldi	r18, 0x7F	; 127
 1d2:	88 e3       	ldi	r24, 0x38	; 56
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	21 50       	subi	r18, 0x01	; 1
 1d8:	80 40       	sbci	r24, 0x00	; 0
 1da:	90 40       	sbci	r25, 0x00	; 0
 1dc:	e1 f7       	brne	.-8      	; 0x1d6 <main+0xa>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <main+0x14>
 1e0:	00 00       	nop
	_delay_ms(50);     // LCD power-on delay
	i2c_lcd_init();
 1e2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <i2c_lcd_init>
 1e6:	2f ef       	ldi	r18, 0xFF	; 255
 1e8:	80 e7       	ldi	r24, 0x70	; 112
 1ea:	92 e0       	ldi	r25, 0x02	; 2
 1ec:	21 50       	subi	r18, 0x01	; 1
 1ee:	80 40       	sbci	r24, 0x00	; 0
 1f0:	90 40       	sbci	r25, 0x00	; 0
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <main+0x20>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <main+0x2a>
 1f6:	00 00       	nop
	_delay_ms(100);    // Optional extra delay
	i2c_lcd_data('H');
 1f8:	88 e4       	ldi	r24, 0x48	; 72
 1fa:	0e 94 52 00 	call	0xa4	; 0xa4 <i2c_lcd_data>
 1fe:	ff cf       	rjmp	.-2      	; 0x1fe <main+0x32>

00000200 <_exit>:
 200:	f8 94       	cli

00000202 <__stop_program>:
 202:	ff cf       	rjmp	.-2      	; 0x202 <__stop_program>
